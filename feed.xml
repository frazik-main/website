<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://frazik-main.github.io/website/feed.xml" rel="self" type="application/atom+xml"/><link href="https://frazik-main.github.io/website/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-03T00:25:54+00:00</updated><id>https://frazik-main.github.io/website/feed.xml</id><title type="html">Frazik</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Using PL/SQL’s ANY Types for Dynamic Typing</title><link href="https://frazik-main.github.io/website/blog/2010/dynamic-typing-plsql/" rel="alternate" type="text/html" title="Using PL/SQL’s ANY Types for Dynamic Typing"/><published>2010-09-28T10:00:00+00:00</published><updated>2010-09-28T10:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/dynamic-typing-plsql</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/dynamic-typing-plsql/"><![CDATA[<p>PL/SQL is a statically-typed language. Data types must be declared and checked at compile time. However, situations arise where dynamic typing is necessary. For these cases, PL/SQL introduced <code class="language-plaintext highlighter-rouge">ANY</code> types (starting in Oracle 9i). These dynamic data types allow manipulation of data whose type isn’t known until runtime. The type is determined at runtime using introspection (e.g., the <code class="language-plaintext highlighter-rouge">gettype</code> function).</p> <p>You cannot directly manipulate the internal structure of <code class="language-plaintext highlighter-rouge">ANY</code> types; procedures and functions are required. The main <code class="language-plaintext highlighter-rouge">ANY</code> type family members are:</p> <ul> <li><code class="language-plaintext highlighter-rouge">AnyData</code> (holds a single value of any type, including built-in scalar datatypes and user-defined object types).</li> <li><code class="language-plaintext highlighter-rouge">AnyType</code> (holds a type description).</li> </ul> <p>The following example demonstrates a heterogeneous array of transport means using <code class="language-plaintext highlighter-rouge">SYS.AnyType</code>. Three user-defined types represent different transport types:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">TYPE</span> <span class="n">airplane_o</span> <span class="k">AS</span> <span class="k">OBJECT</span> <span class="p">(</span>
    <span class="n">engine_type</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">35</span><span class="p">),</span>
    <span class="n">lift</span> <span class="n">NUMBER</span>
<span class="p">)</span> <span class="o">/</span>

<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">TYPE</span> <span class="n">car_o</span> <span class="k">AS</span> <span class="k">OBJECT</span> <span class="p">(</span>
    <span class="n">engine_power</span> <span class="n">NUMBER</span><span class="p">,</span>
    <span class="n">color</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">35</span><span class="p">)</span>
<span class="p">)</span> <span class="o">/</span>

<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">TYPE</span> <span class="n">train_o</span> <span class="k">AS</span> <span class="k">OBJECT</span> <span class="p">(</span>
    <span class="n">engine_type</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">35</span><span class="p">),</span>
    <span class="n">speed</span> <span class="n">NUMBER</span>
<span class="p">)</span> <span class="o">/</span>

<span class="k">SET</span> <span class="n">SERVEROUTPUT</span> <span class="k">ON</span><span class="p">;</span>

<span class="k">DECLARE</span>
    <span class="k">TYPE</span> <span class="n">transports_t</span> <span class="k">IS</span> <span class="n">VARRAY</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="k">OF</span> <span class="n">SYS</span><span class="p">.</span><span class="n">AnyData</span><span class="p">;</span>
    <span class="n">transports</span> <span class="n">transports_t</span><span class="p">;</span>
    <span class="n">airplane</span> <span class="n">airplane_o</span><span class="p">;</span>
    <span class="n">car</span> <span class="n">car_o</span><span class="p">;</span>
    <span class="n">train</span> <span class="n">train_o</span><span class="p">;</span>
    <span class="n">ret_val</span> <span class="n">NUMBER</span><span class="p">;</span>
<span class="k">BEGIN</span>
    <span class="n">transports</span> <span class="p">:</span><span class="o">=</span> <span class="n">transports_t</span><span class="p">(</span>
        <span class="n">AnyData</span><span class="p">.</span><span class="n">ConvertObject</span><span class="p">(</span><span class="n">airplane_o</span><span class="p">(</span><span class="s1">'turboprop'</span><span class="p">,</span> <span class="mi">2300</span><span class="p">)),</span>
        <span class="n">AnyData</span><span class="p">.</span><span class="n">ConvertObject</span><span class="p">(</span><span class="n">airplane_o</span><span class="p">(</span><span class="s1">'jet'</span><span class="p">,</span> <span class="mi">3500</span><span class="p">)),</span>
        <span class="n">AnyData</span><span class="p">.</span><span class="n">ConvertObject</span><span class="p">(</span><span class="n">car_o</span><span class="p">(</span><span class="mi">55</span><span class="p">,</span> <span class="s1">'red'</span><span class="p">)),</span>
        <span class="n">AnyData</span><span class="p">.</span><span class="n">ConvertObject</span><span class="p">(</span><span class="n">train_o</span><span class="p">(</span><span class="s1">'electric'</span><span class="p">,</span> <span class="mi">80</span><span class="p">)),</span>
        <span class="n">AnyData</span><span class="p">.</span><span class="n">ConvertObject</span><span class="p">(</span><span class="n">train_o</span><span class="p">(</span><span class="s1">'steam'</span><span class="p">,</span> <span class="mi">45</span><span class="p">)),</span>
        <span class="n">AnyData</span><span class="p">.</span><span class="n">ConvertObject</span><span class="p">(</span><span class="n">airplane_o</span><span class="p">(</span><span class="s1">'ramjet'</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="p">);</span>

    <span class="k">FOR</span> <span class="n">i</span> <span class="k">IN</span> <span class="mi">1</span> <span class="p">..</span> <span class="n">transports</span><span class="p">.</span><span class="k">COUNT</span> <span class="n">LOOP</span>
        <span class="n">IF</span> <span class="n">transports</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetTypeName</span> <span class="o">=</span> <span class="s1">'HR.AIRPLANE_O'</span> <span class="k">THEN</span>
            <span class="n">ret_val</span> <span class="p">:</span><span class="o">=</span> <span class="n">transports</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetObject</span><span class="p">(</span><span class="n">airplane</span><span class="p">);</span>
            <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="s1">'Airplane: '</span> <span class="o">||</span> <span class="s1">'engine type: '</span> <span class="o">||</span>
                                 <span class="n">airplane</span><span class="p">.</span><span class="n">engine_type</span> <span class="o">||</span> <span class="s1">', lift: '</span> <span class="o">||</span> <span class="n">airplane</span><span class="p">.</span><span class="n">lift</span> <span class="o">||</span> <span class="s1">'lbs'</span><span class="p">);</span>
        <span class="n">ELSIF</span> <span class="n">transports</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetTypeName</span> <span class="o">=</span> <span class="s1">'HR.CAR_O'</span> <span class="k">THEN</span>
            <span class="n">ret_val</span> <span class="p">:</span><span class="o">=</span> <span class="n">transports</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetObject</span><span class="p">(</span><span class="n">car</span><span class="p">);</span>
            <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="s1">'Car: '</span> <span class="o">||</span> <span class="s1">'engine power: '</span> <span class="o">||</span>
                                 <span class="n">car</span><span class="p">.</span><span class="n">engine_power</span> <span class="o">||</span> <span class="s1">'KW, color: '</span> <span class="o">||</span> <span class="n">car</span><span class="p">.</span><span class="n">color</span><span class="p">);</span>
        <span class="n">ELSIF</span> <span class="n">transports</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetTypeName</span> <span class="o">=</span> <span class="s1">'HR.TRAIN_O'</span> <span class="k">THEN</span>
            <span class="n">ret_val</span> <span class="p">:</span><span class="o">=</span> <span class="n">transports</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetObject</span><span class="p">(</span><span class="n">train</span><span class="p">);</span>
            <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="s1">'Train: '</span> <span class="o">||</span> <span class="s1">'engine type: '</span> <span class="o">||</span>
                                 <span class="n">train</span><span class="p">.</span><span class="n">engine_type</span> <span class="o">||</span> <span class="s1">', speed: '</span> <span class="o">||</span> <span class="n">train</span><span class="p">.</span><span class="n">speed</span> <span class="o">||</span> <span class="s1">'KMh'</span><span class="p">);</span>
        <span class="k">END</span> <span class="n">IF</span><span class="p">;</span>
    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p><strong>Code Explanation:</strong></p> <ul> <li><strong>Lines 1-9:</strong> Define the object types <code class="language-plaintext highlighter-rouge">airplane_o</code>, <code class="language-plaintext highlighter-rouge">car_o</code>, and <code class="language-plaintext highlighter-rouge">train_o</code>.</li> <li><strong>Lines 12-16:</strong> Declare variables: a VARRAY <code class="language-plaintext highlighter-rouge">transports_t</code> to hold <code class="language-plaintext highlighter-rouge">AnyData</code> objects, and variables for each transport type.</li> <li><strong>Lines 19-27:</strong> Populate the <code class="language-plaintext highlighter-rouge">transports</code> VARRAY with instances of the object types, converting them to <code class="language-plaintext highlighter-rouge">AnyData</code> using <code class="language-plaintext highlighter-rouge">AnyData.ConvertObject</code>.</li> <li><strong>Lines 29-48:</strong> Loop through the <code class="language-plaintext highlighter-rouge">transports</code> array. <code class="language-plaintext highlighter-rouge">transports(i).GetTypeName</code> retrieves the type name. Based on the type, the appropriate object is retrieved using <code class="language-plaintext highlighter-rouge">GetObject</code>, and its properties are printed to the console.</li> </ul> <p>Running this code (after replacing <code class="language-plaintext highlighter-rouge">HR</code> with your schema name if necessary) will output information about each transport, demonstrating the dynamic handling of different object types using <code class="language-plaintext highlighter-rouge">ANY</code> types. Note that error handling (checking the return value of <code class="language-plaintext highlighter-rouge">GetObject</code>) has been omitted for brevity. In a production environment, proper error handling should be included.</p>]]></content><author><name></name></author><category term="database,"/><category term="plsql"/><category term="plsql,"/><category term="anytype,"/><category term="anydata,"/><category term="dynamic-typing,"/><category term="oracle"/><summary type="html"><![CDATA[Exploring PL/SQL's ANY types for handling data of unknown type at runtime.]]></summary></entry><entry><title type="html">Using PL/SQL Collections to Optimize Data Retrieval</title><link href="https://frazik-main.github.io/website/blog/2010/plsq-cut-down-round-trips/" rel="alternate" type="text/html" title="Using PL/SQL Collections to Optimize Data Retrieval"/><published>2010-09-14T10:00:00+00:00</published><updated>2010-09-14T10:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/plsq-cut-down-round-trips</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/plsq-cut-down-round-trips/"><![CDATA[<p>Introduction</p> <p>Using PL/SQL collections, you can combine master and detail tables in a single SELECT statement, converting detail records into a collection type. This significantly improves performance for data-intensive applications by reducing the number of round trips to the database. This avoids the overhead of duplicating the master record for each detail record.</p> <p>Consider this SELECT statement in a simplified HR application:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>
    <span class="n">d</span><span class="p">.</span><span class="n">department_id</span><span class="p">,</span>
    <span class="n">d</span><span class="p">.</span><span class="n">department_name</span><span class="p">,</span>
    <span class="n">e</span><span class="p">.</span><span class="n">employee_id</span><span class="p">,</span>
    <span class="n">e</span><span class="p">.</span><span class="n">first_name</span><span class="p">,</span>
    <span class="n">e</span><span class="p">.</span><span class="n">last_name</span>
<span class="k">FROM</span> <span class="n">departments</span> <span class="n">d</span>
<span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">employees</span> <span class="n">e</span>
    <span class="k">ON</span> <span class="n">d</span><span class="p">.</span><span class="n">department_id</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">department_id</span><span class="p">;</span>
</code></pre></div></div> <p>Here, <code class="language-plaintext highlighter-rouge">departments</code> is the master table and <code class="language-plaintext highlighter-rouge">employees</code> is the detail table. For each department, there are zero or more employees.</p> <p>Now, consider this example using PL/SQL collections:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SET</span> <span class="n">SERVEROUTPUT</span> <span class="k">ON</span>

<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">TYPE</span> <span class="n">employees_ids_t</span> <span class="k">AS</span> <span class="k">TABLE</span> <span class="k">OF</span> <span class="n">NUMBER</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
<span class="o">/</span>

<span class="k">DECLARE</span>
    <span class="k">CURSOR</span> <span class="n">dep_emp_cur</span> <span class="k">IS</span>
        <span class="k">SELECT</span>
                <span class="n">d</span><span class="p">.</span><span class="n">department_id</span><span class="p">,</span>
                <span class="n">d</span><span class="p">.</span><span class="n">department_name</span><span class="p">,</span>
            <span class="k">CAST</span><span class="p">(</span><span class="n">MULTISET</span><span class="p">(</span><span class="k">SELECT</span> <span class="n">e</span><span class="p">.</span><span class="n">employee_id</span>
                        <span class="k">FROM</span> <span class="n">employees</span> <span class="n">e</span>
                        <span class="k">WHERE</span> <span class="n">d</span><span class="p">.</span><span class="n">department_id</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">department_id</span><span class="p">)</span>
            <span class="k">AS</span> <span class="n">employees_ids_t</span><span class="p">)</span> <span class="k">AS</span> <span class="n">emp_collection</span>
         <span class="k">FROM</span> <span class="n">departments</span> <span class="n">d</span><span class="p">;</span>
    <span class="n">dep_emp_row</span> <span class="n">dep_emp_cur</span><span class="o">%</span><span class="n">ROWTYPE</span><span class="p">;</span>
    <span class="n">row_index</span> <span class="n">PLS_INTEGER</span><span class="p">;</span>

<span class="k">BEGIN</span>
    <span class="k">OPEN</span> <span class="n">dep_emp_cur</span><span class="p">;</span>

    <span class="n">LOOP</span>
        <span class="k">FETCH</span> <span class="n">dep_emp_cur</span> <span class="k">INTO</span> <span class="n">dep_emp_row</span><span class="p">;</span>

        <span class="n">EXIT</span> <span class="k">WHEN</span> <span class="n">dep_emp_cur</span><span class="o">%</span><span class="n">NOTFOUND</span><span class="p">;</span>

        <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">dep_emp_row</span><span class="p">.</span><span class="n">department_id</span> <span class="o">||</span> <span class="s1">', '</span>
                <span class="o">||</span> <span class="n">dep_emp_row</span><span class="p">.</span><span class="n">department_name</span> <span class="o">||</span> <span class="s1">': employees: '</span><span class="p">);</span>

        <span class="n">row_index</span> <span class="p">:</span><span class="o">=</span> <span class="n">dep_emp_row</span><span class="p">.</span><span class="n">emp_collection</span><span class="p">.</span><span class="k">FIRST</span><span class="p">;</span>
        <span class="n">LOOP</span>
            <span class="n">EXIT</span> <span class="k">WHEN</span> <span class="n">row_index</span> <span class="k">IS</span> <span class="k">NULL</span><span class="p">;</span>

            <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">dep_emp_row</span><span class="p">.</span><span class="n">emp_collection</span><span class="p">(</span><span class="n">row_index</span><span class="p">)</span> <span class="o">||</span> <span class="s1">', '</span><span class="p">);</span>

            <span class="n">row_index</span> <span class="p">:</span><span class="o">=</span> <span class="n">dep_emp_row</span><span class="p">.</span><span class="n">emp_collection</span><span class="p">.</span><span class="k">NEXT</span><span class="p">(</span><span class="n">row_index</span><span class="p">);</span>

        <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>

        <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="s1">''</span><span class="p">);</span>

    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>

    <span class="k">CLOSE</span> <span class="n">dep_emp_cur</span><span class="p">;</span>

<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p>The simple JOIN repeats the master table for each detail record. However, the PL/SQL code produces a different result: it combines the master and detail data into single rows, eliminating master record repetition. This approach is significantly more efficient. (Images illustrating the difference would be included here if available.)</p> <p>This demonstrates the power of using PL/SQL collections for efficient data retrieval and processing. By consolidating data from multiple tables into a single result set, you greatly reduce database load and improve application performance.</p>]]></content><author><name></name></author><category term="Database"/><category term="Programming"/><category term="PLSQL,"/><category term="Oracle,"/><category term="Database,"/><category term="Performance"/><category term="Optimization,"/><category term="Collections"/><summary type="html"><![CDATA[Learn how to use PL/SQL collections to combine master and detail tables in a single SELECT statement, reducing database round trips and improving performance.]]></summary></entry><entry><title type="html">JavaScript Closures - A Deep Dive</title><link href="https://frazik-main.github.io/website/blog/2010/javascript-concepts-part4/" rel="alternate" type="text/html" title="JavaScript Closures - A Deep Dive"/><published>2010-09-07T10:00:00+00:00</published><updated>2010-09-07T10:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/javascript-concepts-part4</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/javascript-concepts-part4/"><![CDATA[<p>This post delves into the concept of closures in JavaScript. Closures are often a challenging concept for programmers coming from traditional object-oriented or procedural backgrounds, but they’re a fundamental and powerful tool for writing effective JavaScript code, especially when dealing with asynchronous operations.</p> <p><strong>Introduction</strong></p> <p>JavaScript is a ubiquitous language in web development, but many developers don’t fully utilize its deeper features. This series explores some of these advanced concepts. This is the final article in this short tutorial.</p> <p><strong>Closures</strong></p> <p>Simply put, a closure in JavaScript is a function instance coupled with its surrounding environment. This environment includes variables declared <em>outside</em> the function’s immediate scope (but accessible to it). Essentially, it’s a function “remembering” its creation context, even after that context has gone out of scope.</p> <p>When a function is declared, it retains access to all variables within its scope at the time of declaration. The key here is that this access to “outer” variables persists <em>even after</em> that outer scope is no longer active. This persistence is what constitutes the “closure”.</p> <p>This feature is crucial for many JavaScript programming patterns, particularly when dealing with asynchronous callbacks. Let’s examine an example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">local</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nf">setInterval</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="nx">local</span><span class="p">);</span>
  <span class="nx">local</span><span class="o">++</span><span class="p">;</span>
<span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>
</code></pre></div></div> <p>In this example, we declare a variable <code class="language-plaintext highlighter-rouge">local</code> and assign it the value 1. We then use <code class="language-plaintext highlighter-rouge">setInterval</code> to create a timer that executes a function every 3 seconds. The callback function within <code class="language-plaintext highlighter-rouge">setInterval</code> references the outer variable <code class="language-plaintext highlighter-rouge">local</code>, and it increments this variable with each execution.</p> <p>You might expect that, since the timer function executes <em>after</em> the initial script has finished (and <code class="language-plaintext highlighter-rouge">local</code>’s scope is technically gone), <code class="language-plaintext highlighter-rouge">local</code> would be undefined. However, this doesn’t happen. The closure ensures that the callback function retains access to the <code class="language-plaintext highlighter-rouge">local</code> variable throughout the lifetime of the timer.</p> <p>This persistent access is the essence of closures. Although the initial scope containing <code class="language-plaintext highlighter-rouge">local</code> is gone, the closure created by the function and <code class="language-plaintext highlighter-rouge">local</code> remains active.</p> <p>This concludes our series. I hope you found these concepts helpful and informative!</p>]]></content><author><name></name></author><category term="javascript-concepts"/><category term="javascript,"/><category term="closures,"/><category term="asynchronous,"/><category term="programming"/><summary type="html"><![CDATA[Understanding closures in JavaScript, a powerful concept for handling asynchronous callbacks.]]></summary></entry><entry><title type="html">JavaScript Concepts - Callbacks and Function Context</title><link href="https://frazik-main.github.io/website/blog/2010/javascript-concepts-part3/" rel="alternate" type="text/html" title="JavaScript Concepts - Callbacks and Function Context"/><published>2010-09-06T10:00:00+00:00</published><updated>2010-09-06T10:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/javascript-concepts-part3</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/javascript-concepts-part3/"><![CDATA[<h1 id="javascript-concepts-part-3---callbacks-and-function-context">JavaScript Concepts: Part 3 - Callbacks and Function Context</h1> <p>JavaScript is widely used on the web, but its deeper concepts are often overlooked. This article, the third in a series, explores how functions work in JavaScript, focusing on callbacks and function context.</p> <h2 id="function-callbacks">Function Callbacks</h2> <p>Web page code is asynchronous, and so are JavaScript functions. A crucial concept in asynchronous programming is the <em>callback</em> function.</p> <p>Consider this example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">myarray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">22</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">105</span><span class="p">];</span>

<span class="kd">function</span> <span class="nf">sortAscending</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">myarray</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="nx">sortAscending</span><span class="p">);</span>

<span class="nf">alert</span><span class="p">(</span><span class="nx">myarray</span><span class="p">);</span> <span class="c1">//Alerts the sorted array: 1, 3, 5, 21, 22, 105</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">sort</code> function uses <code class="language-plaintext highlighter-rouge">sortAscending</code> as a reference. Passing a function as a parameter is like passing any other value. Because the <code class="language-plaintext highlighter-rouge">sort</code> function <em>calls back</em> to our custom function, this is called a <em>callback</em> function.</p> <p>Callbacks are often defined as anonymous functions for brevity:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">myarray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">22</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">105</span><span class="p">];</span>

<span class="nx">myarray</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">});</span>

<span class="nf">alert</span><span class="p">(</span><span class="nx">myarray</span><span class="p">);</span> <span class="c1">//Alerts the sorted array: 1, 3, 5, 21, 22, 105</span>
</code></pre></div></div> <p>I prefer declared functions because their reusability is clearer and they avoid a “hack-like” appearance.</p> <h2 id="function-context">Function Context</h2> <p>Object-oriented languages use <code class="language-plaintext highlighter-rouge">this</code> to reference the current object instance. JavaScript also uses <code class="language-plaintext highlighter-rouge">this</code>, but its behavior differs subtly yet significantly.</p> <p>In JavaScript, the context (<code class="language-plaintext highlighter-rouge">this</code>) of a function is the object that contains the reference used to invoke the function. This is best understood with an example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">desc</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">address</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">yearBuild</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">house</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">noOfdoors</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="na">address</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Main road 51</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">yearBuild</span><span class="p">:</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="mi">2001</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span>
  <span class="na">description</span><span class="p">:</span> <span class="nx">desc</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">house</span><span class="p">.</span><span class="nf">description</span><span class="p">();</span> <span class="c1">// Works correctly</span>
</code></pre></div></div> <p>This alert box works because <code class="language-plaintext highlighter-rouge">this</code> refers to the <code class="language-plaintext highlighter-rouge">house</code> object. However, calling <code class="language-plaintext highlighter-rouge">desc()</code> in the global scope will fail unless variables <code class="language-plaintext highlighter-rouge">address</code> and <code class="language-plaintext highlighter-rouge">yearBuild</code> are also defined in the global scope:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">desc</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">address</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">yearBuild</span><span class="p">);</span>
<span class="p">};</span>

<span class="nx">address</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Some road from Window</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">yearBuild</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="mi">2002</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
<span class="nf">desc</span><span class="p">();</span> <span class="c1">//Works because 'this' refers to the window object.</span>
</code></pre></div></div> <p>In JavaScript, the object referenced by <code class="language-plaintext highlighter-rouge">this</code> is determined by <em>how</em> the function is invoked, not by how it’s declared. The same function can have different contexts depending on the call.</p> <p>JavaScript provides ways to explicitly control the function context using the <code class="language-plaintext highlighter-rouge">call()</code> or <code class="language-plaintext highlighter-rouge">apply()</code> methods. <code class="language-plaintext highlighter-rouge">call()</code> invokes the function, specifying the context as its first parameter. The remaining parameters are passed to the function. <code class="language-plaintext highlighter-rouge">apply()</code> is similar but uses an array of parameters.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">showMe</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">me</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">m1</span> <span class="o">=</span> <span class="p">{</span> <span class="na">me</span><span class="p">:</span> <span class="dl">"</span><span class="s2">meFirst</span><span class="dl">"</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">m2</span> <span class="o">=</span> <span class="p">{</span> <span class="na">me</span><span class="p">:</span> <span class="dl">"</span><span class="s2">meSecond</span><span class="dl">"</span> <span class="p">};</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">me</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">meWindow</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">m1</span><span class="p">.</span><span class="nx">whoAmI</span> <span class="o">=</span> <span class="nx">showMe</span><span class="p">;</span>

<span class="nf">alert</span><span class="p">(</span><span class="nf">showMe</span><span class="p">());</span> <span class="c1">// meWindow (global context)</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">m1</span><span class="p">.</span><span class="nf">whoAmI</span><span class="p">());</span> <span class="c1">// meFirst (m1 context)</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">showMe</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nx">m2</span><span class="p">));</span> <span class="c1">// meSecond (m2 context)</span>
</code></pre></div></div> <p>The first alert uses the global context. The second uses <code class="language-plaintext highlighter-rouge">m1</code>’s context. The third explicitly sets the context to <code class="language-plaintext highlighter-rouge">m2</code>.</p> <p>In summary, understanding <code class="language-plaintext highlighter-rouge">this</code> and callback functions is essential for working effectively with asynchronous JavaScript. This is the end of Part 3; continue to <a href="http://codingwithpassion.blogspot.com/2010/09/javascript-concepts-part-4-closures.html">Part 4</a> (closures) for more.</p>]]></content><author><name></name></author><category term="javascript-concepts"/><category term="javascript,"/><category term="callbacks,"/><category term="function-context,"/><category term="this"/><summary type="html"><![CDATA[A deep dive into JavaScript callbacks and function context, exploring how `this` works and how to manage function contexts using `call()`]]></summary></entry><entry><title type="html">Storing Collections in Database Columns</title><link href="https://frazik-main.github.io/website/blog/2010/plsql-collections-as-columns/" rel="alternate" type="text/html" title="Storing Collections in Database Columns"/><published>2010-09-06T10:00:00+00:00</published><updated>2010-09-06T10:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/plsql-collections-as-columns</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/plsql-collections-as-columns/"><![CDATA[<p>This post demonstrates how to store collections in database columns within a relational table. This technique is useful for persisting collection data without creating additional detail tables. While common in object databases like Google App Engine Bigtable, this approach is also applicable to relational databases.</p> <h3 id="simple-example">Simple Example</h3> <p>This example uses a <code class="language-plaintext highlighter-rouge">VARRAY</code> (you can also use a nested table � see <a href="http://codingwithpassion.blogspot.com/2010/09/oracle-plsql-collections.html">this article</a> about PL/SQL collections) as a column in a relational table.</p> <p>First, a schema-level collection type <code class="language-plaintext highlighter-rouge">varchar_collection_t</code> is declared, capable of holding up to four <code class="language-plaintext highlighter-rouge">VARCHAR2</code> elements. Then, a table <code class="language-plaintext highlighter-rouge">animes</code> is created with a column <code class="language-plaintext highlighter-rouge">characters</code> of this collection type. Finally, a collection is populated and inserted into the <code class="language-plaintext highlighter-rouge">animes</code> table.</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TYPE</span> <span class="n">varchar_collection_t</span> <span class="k">IS</span> <span class="n">VARRAY</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="k">OF</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="o">/</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">animes</span> <span class="p">(</span>
    <span class="n">name</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">characters</span> <span class="n">varchar_collection_t</span>
<span class="p">);</span>

<span class="k">DECLARE</span>
    <span class="n">anime_characters</span> <span class="n">varchar_collection_t</span> <span class="p">:</span><span class="o">=</span> <span class="n">varchar_collection_t</span><span class="p">();</span>
<span class="k">BEGIN</span>
    <span class="n">anime_characters</span><span class="p">.</span><span class="n">EXTEND</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>

    <span class="n">anime_characters</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Satsuki'</span><span class="p">;</span>
    <span class="n">anime_characters</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Mei'</span><span class="p">;</span>
    <span class="n">anime_characters</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Totoro'</span><span class="p">;</span>
    <span class="n">anime_characters</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Kanta'</span><span class="p">;</span>

    <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">animes</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">characters</span><span class="p">)</span>
    <span class="k">VALUES</span> <span class="p">(</span><span class="s1">'My Neighbor Totoro'</span><span class="p">,</span> <span class="n">anime_characters</span><span class="p">);</span>

<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p>As shown, a simple <code class="language-plaintext highlighter-rouge">INSERT</code> statement is used to insert the collection into the table. <code class="language-plaintext highlighter-rouge">VARRAY</code> columns store collection data inline (similar to comma-separated values), while nested tables create a separate database table behind the scenes. Oracle recommends <code class="language-plaintext highlighter-rouge">VARRAY</code> for smaller arrays and nested tables for larger ones.</p> <p>One important note: you cannot directly manipulate data within a stored collection. You need to use <code class="language-plaintext highlighter-rouge">CAST</code> and <code class="language-plaintext highlighter-rouge">TABLE</code> syntax. This example shows how to filter using data from the collection:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">animes</span> <span class="n">a</span>
<span class="k">WHERE</span> <span class="s1">'Mei'</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="k">TABLE</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">characters</span><span class="p">));</span>
</code></pre></div></div> <p>Notice the use of the <code class="language-plaintext highlighter-rouge">TABLE</code> syntax. Even with only one row in the table, this demonstrates the concept effectively.</p>]]></content><author><name></name></author><category term="database-design"/><category term="oracle,"/><category term="plsql,"/><category term="database,"/><category term="collections,"/><category term="varray,"/><category term="nested"/><category term="table"/><summary type="html"><![CDATA[Demonstrates how to store collections in database columns using Oracle's VARRAY.]]></summary></entry><entry><title type="html">JavaScript Functions - A Deep Dive</title><link href="https://frazik-main.github.io/website/blog/2010/javascript-concepts-part2/" rel="alternate" type="text/html" title="JavaScript Functions - A Deep Dive"/><published>2010-09-05T00:00:00+00:00</published><updated>2010-09-05T00:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/javascript-concepts-part2</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/javascript-concepts-part2/"><![CDATA[<p>This post delves into the often-overlooked deeper aspects of JavaScript functions.</p> <h2 id="introduction">Introduction</h2> <p>JavaScript, a ubiquitous language on the web, is frequently used without a thorough understanding of its underlying mechanisms. This “JavaScript Concepts” series aims to illuminate some of these deeper concepts. This article provides a concise overview of JavaScript functions.</p> <h2 id="functions-the-core-idea">Functions: The Core Idea</h2> <p>In many traditional object-oriented languages (Java, C++, C#, etc.), objects encapsulate both data and methods. These languages treat data and methods as distinct entities. Methods modify an object’s state by altering its properties (fields).</p> <p>JavaScript takes a different approach.</p> <p>In JavaScript, <strong>functions are considered objects</strong>. There’s no distinction between object types like <code class="language-plaintext highlighter-rouge">String</code>, <code class="language-plaintext highlighter-rouge">Number</code>, <code class="language-plaintext highlighter-rouge">window</code> objects, custom objects, and <em>functions</em>. Functions are defined by a constructor named “Function,” similar to constructors in other object-oriented languages.</p> <p>A function can have parameters, and its value (being an object) can be assigned to a variable, a property of an object, returned as a function’s return value, or passed as a parameter to another function. This is all possible because functions in JavaScript are treated like other objects. Therefore, we say that functions are <strong>first-class objects</strong> in JavaScript.</p> <h3 id="example-functions">Example Functions:</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">one</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">doStuff</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">two</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">calculate stuff</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">three</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">stuff</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="function-names">Function Names</h2> <p>Consider this example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">findMatrix</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello Neo, what is the Matrix?</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>This does <em>not</em> create a function named “findMatrix” in the way you might expect. While the syntax may seem familiar, it’s essentially syntactic sugar (a feature JavaScript is known for) similar to using <code class="language-plaintext highlighter-rouge">var</code> to create <code class="language-plaintext highlighter-rouge">window</code> properties (as discussed in a previous article about JavaScript objects). It creates a function instance and assigns it to the <code class="language-plaintext highlighter-rouge">window</code> property using the function’s name, as shown below:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">findMatrix</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello Neo, what is the Matrix?</span><span class="dl">"</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div> <p>When declaring a top-level named function, a <code class="language-plaintext highlighter-rouge">Function</code> instance is created and assigned to a property (with the function’s name) of the <code class="language-plaintext highlighter-rouge">window</code> object.</p> <p>While this might seem like a subtle detail, it’s crucial to understand that <code class="language-plaintext highlighter-rouge">Function</code> instances are <strong>values</strong> that can be assigned to variables, properties, or parameters, just like instances of other object types. Importantly, these function instances are useless unless assigned to a variable, property, or parameter.</p>]]></content><author><name></name></author><category term="javascript-concepts"/><category term="javascript,"/><category term="functions,"/><category term="programming"/><summary type="html"><![CDATA[Exploring the deeper concepts of JavaScript functions, including their object nature and first-class status.]]></summary></entry><entry><title type="html">JavaScript Concepts - Objects</title><link href="https://frazik-main.github.io/website/blog/2010/javascript-concepts-part1/" rel="alternate" type="text/html" title="JavaScript Concepts - Objects"/><published>2010-09-04T10:00:00+00:00</published><updated>2010-09-04T10:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/javascript-concepts-part1</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/javascript-concepts-part1/"><![CDATA[<h1 id="javascript-concepts-objects">JavaScript Concepts: Objects</h1> <h2 id="introduction">Introduction</h2> <p>JavaScript is a widely used web language, but many page authors don’t utilize its deeper concepts. This “JavaScript Concepts series” aims to introduce some of these advanced features. This is the first article in the series.</p> <h2 id="why-objects">Why Objects?</h2> <p>The most important concept in JavaScript is that functions are <em>first-class objects</em>. To understand this, we must first grasp JavaScript objects.</p> <p>In JavaScript, newly created objects hold no data and offer minimal semantics. JavaScript objects don’t support “classic” object-oriented programming in the way programmers familiar with languages like Java might expect.</p> <p>We can create objects using the <code class="language-plaintext highlighter-rouge">new</code> operator (other methods exist, as we’ll see later).</p> <p>Objects contain properties and “methods.” Unlike statically-typed languages, properties and methods aren’t predeclared; we create them dynamically. This flexibility comes with a cost!</p> <p>In the following example, we create a new <code class="language-plaintext highlighter-rouge">Object</code> instance and assign it to a variable named <code class="language-plaintext highlighter-rouge">house</code>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">house</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="p">();</span>
<span class="nx">house</span><span class="p">.</span><span class="nx">noOfdoors</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="nx">house</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Main road 51</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">house</span><span class="p">.</span><span class="nx">yearBuild</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="mi">2001</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">);</span>
</code></pre></div></div> <p>Properties aren’t limited to primitive types; an object property can be another object instance. Let’s add an <code class="language-plaintext highlighter-rouge">owner</code> property to our <code class="language-plaintext highlighter-rouge">house</code> instance:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">owner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="p">();</span>
<span class="nx">owner</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Kimi Raikkonen</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">owner</span><span class="p">.</span><span class="nx">occupation</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Rally driver</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">owner</span><span class="p">.</span><span class="nx">previousOccupation</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">F1 driver</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">house</span><span class="p">.</span><span class="nx">owner</span> <span class="o">=</span> <span class="nx">owner</span><span class="p">;</span>
</code></pre></div></div> <p>To access a nested property:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">homeOwnerName</span> <span class="o">=</span> <span class="nx">house</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</code></pre></div></div> <h2 id="json">JSON</h2> <p>A more concise notation for creating objects is JSON (JavaScript Object Notation), preferred by many developers. See <a href="http://www.json.org">http://www.json.org</a> for more information.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">house</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">noOfdoors</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="na">address</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Main road 51</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">yearBuild</span><span class="p">:</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="mi">2001</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span>
  <span class="na">owner</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Kimi Raikkonen</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">occupation</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Rally driver</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//Corrected duplicate 'name' property</span>
  <span class="p">},</span>
<span class="p">};</span>
<span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">House owner: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">house</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Works fine.</span>
</code></pre></div></div> <h2 id="window-object">Window Object</h2> <p>When you declare a variable at the top level (global or window scope) using <code class="language-plaintext highlighter-rouge">var</code>, you’re creating a top-level property of the <code class="language-plaintext highlighter-rouge">window</code> object. Omitting <code class="language-plaintext highlighter-rouge">var</code> inside a function also creates a top-level <code class="language-plaintext highlighter-rouge">window</code> property.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Simon</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// Global variable, property of window object.</span>
<span class="nf">alert</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Works fine.</span>

<span class="kd">function</span> <span class="nf">calculatePi</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// something...</span>
  <span class="nx">result</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span> <span class="c1">// Without var, this is a window property.</span>
<span class="p">}</span>

<span class="nf">calculatePi</span><span class="p">();</span>
<span class="nf">alert</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// Works fine.</span>
</code></pre></div></div> <p>This concludes our introduction to objects. To learn more, read about <a href="http://codingwithpassion.blogspot.com/2010/09/javascript-concepts-part-1-functions.html">JavaScript functions</a>.</p>]]></content><author><name></name></author><category term="javascript-concepts"/><category term="javascript,"/><category term="objects,"/><category term="json,"/><category term="programming"/><summary type="html"><![CDATA[An introduction to objects in JavaScript, including object creation, properties, JSON notation, and the window object.]]></summary></entry><entry><title type="html">PL/SQL Collections A Comprehensive Guide</title><link href="https://frazik-main.github.io/website/blog/2010/plsq-collections/" rel="alternate" type="text/html" title="PL/SQL Collections A Comprehensive Guide"/><published>2010-09-03T10:00:00+00:00</published><updated>2010-09-03T10:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/plsq-collections</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/plsq-collections/"><![CDATA[<p>It’s surprising how few database programmers truly understand and utilize collections in PL/SQL. They often favor a more SQL-like approach, overlooking potential performance gains and improvements in code readability.</p> <p>With collections, you can significantly enhance performance by caching frequently accessed data within a single program. Data processing can also be sped up, eliminating the need for relational tables or global temporary tables.</p> <p>While PL/SQL collections might seem cumbersome and confusing (especially compared to collections in languages like Java), they offer powerful capabilities. There are three main types:</p> <p><strong>Associative Arrays</strong></p> <p>These are single-dimensional, unbounded, and sparse collections of homogeneous elements. They don’t need to be filled sequentially. The following example demonstrates declaration, population, and iteration:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SET</span> <span class="n">SERVEROUTPUT</span> <span class="k">ON</span>

<span class="k">DECLARE</span>
    <span class="k">TYPE</span> <span class="n">names_list_t</span> <span class="k">IS</span> <span class="k">TABLE</span> <span class="k">OF</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span>
        <span class="k">INDEX</span> <span class="k">BY</span> <span class="n">PLS_INTEGER</span><span class="p">;</span>
    <span class="n">people</span> <span class="n">names_list_t</span><span class="p">;</span>

    <span class="n">l_row</span> <span class="n">PLS_INTEGER</span><span class="p">;</span> <span class="c1">-- Same type as index.</span>

<span class="k">BEGIN</span>

    <span class="n">people</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>         <span class="p">:</span><span class="o">=</span> <span class="s1">'Bob'</span><span class="p">;</span>
    <span class="n">people</span><span class="p">(</span><span class="mi">33</span><span class="p">)</span>        <span class="p">:</span><span class="o">=</span> <span class="s1">'Bruce'</span><span class="p">;</span>
    <span class="n">people</span><span class="p">(</span><span class="mi">43</span><span class="p">)</span>        <span class="p">:</span><span class="o">=</span> <span class="s1">'Rocky'</span><span class="p">;</span>
    <span class="n">people</span><span class="p">(</span><span class="o">-</span><span class="mi">12</span><span class="p">)</span>        <span class="p">:</span><span class="o">=</span> <span class="s1">'Grozni'</span><span class="p">;</span>
    <span class="n">people</span><span class="p">(</span><span class="mi">1555555</span><span class="p">)</span>   <span class="p">:</span><span class="o">=</span> <span class="s1">'Ivan'</span><span class="p">;</span>

    <span class="n">l_row</span> <span class="p">:</span><span class="o">=</span> <span class="n">people</span><span class="p">.</span><span class="k">FIRST</span><span class="p">;</span>

    <span class="n">WHILE</span> <span class="p">(</span><span class="n">l_row</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">)</span>
    <span class="n">LOOP</span>
        <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="n">people</span><span class="p">(</span><span class="n">l_row</span><span class="p">));</span>
        <span class="n">l_row</span> <span class="p">:</span><span class="o">=</span> <span class="n">people</span><span class="p">.</span><span class="k">NEXT</span><span class="p">(</span><span class="n">l_row</span><span class="p">);</span>
    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p>Associative arrays are the most efficient type. However, they cannot be stored directly in database tables (use nested tables or VARRAYs for that). They are the only practical choice for sparse collections or when negative index subscripts are required.</p> <p><strong>Nested Tables</strong></p> <p>These are also single-dimensional and unbounded collections of homogeneous elements. They start dense but can become sparse through deletions. Nested tables are <em>multisets</em>, meaning element order isn’t inherent. This can be problematic if order needs to be preserved (use VARRAYs for that). While you can use keys and indexes, VARRAYs provide a more straightforward solution for maintaining order.</p> <p>The following example shows how to declare a nested table type at the schema level, declare nested tables based on that type, create their union, and display the result:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">TYPE</span> <span class="n">car_names_list_t</span> <span class="k">IS</span> <span class="k">TABLE</span> <span class="k">OF</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>

<span class="k">DECLARE</span>
    <span class="n">great_cars</span>          <span class="n">car_names_list_t</span> <span class="p">:</span><span class="o">=</span> <span class="n">car_names_list_t</span><span class="p">();</span>
    <span class="n">not_so_great_cars</span>   <span class="n">car_names_list_t</span> <span class="p">:</span><span class="o">=</span> <span class="n">car_names_list_t</span><span class="p">();</span>

    <span class="n">all_this_cars</span>       <span class="n">car_names_list_t</span> <span class="p">:</span><span class="o">=</span> <span class="n">car_names_list_t</span><span class="p">();</span>

<span class="k">BEGIN</span>
    <span class="n">great_cars</span><span class="p">.</span><span class="n">EXTEND</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
    <span class="n">great_cars</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Golf'</span><span class="p">;</span>
    <span class="n">great_cars</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Impreza'</span><span class="p">;</span>
    <span class="n">great_cars</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Focus'</span><span class="p">;</span>

    <span class="n">not_so_great_cars</span><span class="p">.</span><span class="n">EXTEND</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="n">not_so_great_cars</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Zastava'</span><span class="p">;</span>
    <span class="n">not_so_great_cars</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Dacia'</span><span class="p">;</span>

    <span class="n">all_this_cars</span> <span class="p">:</span><span class="o">=</span> <span class="n">great_cars</span> <span class="n">MULTISET</span> <span class="k">UNION</span> <span class="n">not_so_great_cars</span><span class="p">;</span>

    <span class="k">FOR</span> <span class="n">l_row</span> <span class="k">IN</span> <span class="n">all_this_cars</span><span class="p">.</span><span class="k">FIRST</span> <span class="p">..</span> <span class="n">all_this_cars</span><span class="p">.</span><span class="k">LAST</span>
    <span class="n">LOOP</span>
        <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="n">all_this_cars</span><span class="p">(</span><span class="n">l_row</span><span class="p">));</span>
    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>

<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">EXTEND</code> is used to increase the size of nested tables. <code class="language-plaintext highlighter-rouge">MULTISET UNION</code> (and others like <code class="language-plaintext highlighter-rouge">MULTISET EXCEPT</code>) are used for high-level set operations. In such cases, <code class="language-plaintext highlighter-rouge">EXTEND</code> is often unnecessary.</p> <p>Nested tables are beneficial for high-level set operations, especially in older Oracle databases (&lt;= 10g). They are also the only option for storing large amounts of persistent data in a collection column because the database creates an underlying table.</p> <p><strong>VARRAYs (Variable-Size Arrays)</strong></p> <p>Similar to the other two, VARRAYs are single-dimensional collections of homogeneous elements. However, they are always bounded (have a maximum size) and never sparse. When declaring a VARRAY type, you must specify the maximum number of elements. A key difference from nested tables is that VARRAYs preserve element order when stored as database columns.</p> <p>This example demonstrates basic VARRAY usage:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SET</span> <span class="n">SERVEROUTPUT</span> <span class="k">ON</span>

<span class="k">DECLARE</span>
    <span class="k">TYPE</span> <span class="n">anime_movies_t</span> <span class="k">IS</span> <span class="n">VARRAY</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="k">OF</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>

    <span class="n">anime_movies</span> <span class="n">anime_movies_t</span> <span class="p">:</span><span class="o">=</span> <span class="n">anime_movies_t</span><span class="p">();</span>

<span class="k">BEGIN</span>
    <span class="c1">-- Extend to accommodate the first element</span>
    <span class="n">anime_movies</span><span class="p">.</span><span class="n">EXTEND</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">anime_movies</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Akira'</span><span class="p">;</span>
    <span class="c1">-- Extend to the full length</span>
    <span class="n">anime_movies</span><span class="p">.</span><span class="n">EXTEND</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="n">anime_movies</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Castle in the sky'</span><span class="p">;</span>
    <span class="n">anime_movies</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'My neighbour Totoro'</span><span class="p">;</span>

    <span class="c1">-- Loop or perform other operations here</span>
<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p>Remember to use <code class="language-plaintext highlighter-rouge">EXTEND</code> to make room for elements.</p> <p>Use VARRAYs when you need to preserve element order in a database column, have a relatively small amount of data, don’t need to worry about deletions in the middle, have an intrinsic upper bound, or need to retrieve the entire collection at once.</p> <p>As a final tip, when working with PL/SQL collections, consider creating a package of procedures and functions to encapsulate collection management. This might even hide the underlying collection type, but that’s not always necessary or beneficial.</p>]]></content><author><name></name></author><category term="Database,"/><category term="Programming"/><category term="PL/SQL,"/><category term="collections,"/><category term="associative"/><category term="arrays,"/><category term="nested"/><category term="tables,"/><category term="VARRAY,"/><category term="Oracle"/><summary type="html"><![CDATA[A detailed explanation of associative arrays, nested tables, and VARRAYs in PL/SQL, including examples and best practices.]]></summary></entry><entry><title type="html">Caching Static Data in PL/SQL for Performance Improvement</title><link href="https://frazik-main.github.io/website/blog/2010/caching-data-plsql/" rel="alternate" type="text/html" title="Caching Static Data in PL/SQL for Performance Improvement"/><published>2010-09-03T10:00:00+00:00</published><updated>2010-09-03T10:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/caching-data-plsql</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/caching-data-plsql/"><![CDATA[<p>In many applications, PL/SQL programs repeatedly access the same data from a database. If this data is static (rarely or never changes), repeatedly querying it is inefficient. A better approach is to cache this data in a collection stored within the session’s PGA. This method uses the collection’s index as an “intelligent key,” retrieving data quickly without repeated database queries.</p> <p>Consider the following example:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="n">PACKAGE</span> <span class="n">onlyonce</span> <span class="k">AS</span>

    <span class="k">TYPE</span> <span class="n">names_t</span> <span class="k">IS</span>
        <span class="k">TABLE</span> <span class="k">OF</span> <span class="n">employees</span><span class="p">.</span><span class="n">first_name</span><span class="o">%</span><span class="k">TYPE</span>
            <span class="k">INDEX</span> <span class="k">BY</span> <span class="n">PLS_INTEGER</span><span class="p">;</span>

    <span class="k">names</span> <span class="n">names_t</span><span class="p">;</span>

    <span class="k">FUNCTION</span> <span class="n">get_name</span><span class="p">(</span><span class="n">employee_id_in</span> <span class="k">IN</span> <span class="n">employees</span><span class="p">.</span><span class="n">employee_id</span><span class="o">%</span><span class="k">TYPE</span><span class="p">)</span>
        <span class="k">RETURN</span> <span class="n">employees</span><span class="p">.</span><span class="n">first_name</span><span class="o">%</span><span class="k">TYPE</span><span class="p">;</span>

<span class="k">END</span> <span class="n">onlyonce</span><span class="p">;</span>
<span class="o">/</span>

<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="n">PACKAGE</span> <span class="n">BODY</span> <span class="n">onlyonce</span> <span class="k">AS</span>

    <span class="k">FUNCTION</span> <span class="n">name_from_database</span><span class="p">(</span><span class="n">employee_id_in</span> <span class="k">IN</span> <span class="n">employees</span><span class="p">.</span><span class="n">employee_id</span><span class="o">%</span><span class="k">TYPE</span><span class="p">)</span>
        <span class="k">RETURN</span> <span class="n">employees</span><span class="p">.</span><span class="n">first_name</span><span class="o">%</span><span class="k">TYPE</span>
    <span class="k">IS</span>
        <span class="n">local_names</span> <span class="n">employees</span><span class="p">.</span><span class="n">first_name</span><span class="o">%</span><span class="k">TYPE</span><span class="p">;</span>
    <span class="k">BEGIN</span>
        <span class="k">SELECT</span> <span class="n">first_name</span>
            <span class="k">INTO</span> <span class="n">local_names</span>
            <span class="k">FROM</span> <span class="n">employees</span>
           <span class="k">WHERE</span> <span class="n">employee_id</span> <span class="o">=</span> <span class="n">employee_id_in</span><span class="p">;</span>
        <span class="k">RETURN</span> <span class="n">local_names</span><span class="p">;</span>
    <span class="n">EXCEPTION</span>
        <span class="k">WHEN</span> <span class="n">NO_DATA_FOUND</span> <span class="k">THEN</span>
            <span class="k">RETURN</span> <span class="k">NULL</span><span class="p">;</span> <span class="c1">-- Handle case where employee ID is not found</span>
    <span class="k">END</span><span class="p">;</span>

    <span class="k">FUNCTION</span> <span class="n">get_name</span><span class="p">(</span><span class="n">employee_id_in</span> <span class="k">IN</span> <span class="n">employees</span><span class="p">.</span><span class="n">employee_id</span><span class="o">%</span><span class="k">TYPE</span><span class="p">)</span>
        <span class="k">RETURN</span> <span class="n">employees</span><span class="p">.</span><span class="n">first_name</span><span class="o">%</span><span class="k">TYPE</span>
    <span class="k">IS</span>
        <span class="n">return_value</span> <span class="n">employees</span><span class="p">.</span><span class="n">first_name</span><span class="o">%</span><span class="k">TYPE</span><span class="p">;</span>
    <span class="k">BEGIN</span>
        <span class="k">RETURN</span> <span class="k">names</span><span class="p">(</span><span class="n">employee_id_in</span><span class="p">);</span>
    <span class="n">EXCEPTION</span>
        <span class="k">WHEN</span> <span class="n">NO_DATA_FOUND</span> <span class="k">THEN</span>
            <span class="k">names</span><span class="p">(</span><span class="n">employee_id_in</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="n">name_from_database</span><span class="p">(</span><span class="n">employee_id_in</span><span class="p">);</span>
            <span class="k">RETURN</span> <span class="k">names</span><span class="p">(</span><span class="n">employee_id_in</span><span class="p">);</span>
    <span class="k">END</span><span class="p">;</span>

<span class="k">END</span> <span class="n">onlyonce</span><span class="p">;</span>
<span class="o">/</span>

<span class="k">SET</span> <span class="n">SERVEROUTPUT</span> <span class="k">ON</span>

<span class="k">BEGIN</span>
    <span class="k">FOR</span> <span class="n">j</span> <span class="k">IN</span> <span class="mi">1</span><span class="p">..</span><span class="mi">10</span> <span class="n">LOOP</span>
        <span class="k">FOR</span> <span class="n">i</span> <span class="k">IN</span> <span class="mi">100</span><span class="p">..</span><span class="mi">150</span> <span class="n">LOOP</span>
            <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="n">onlyonce</span><span class="p">.</span><span class="n">get_name</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
        <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p>Let’s break down the code:</p> <p><strong>Lines 3-7:</strong> Declare a collection type (<code class="language-plaintext highlighter-rouge">names_t</code>) and a collection (<code class="language-plaintext highlighter-rouge">names</code>) to hold cached data.</p> <p><strong>Lines 16-26:</strong> <code class="language-plaintext highlighter-rouge">name_from_database</code> function retrieves data from the database one by one. Improved to handle <code class="language-plaintext highlighter-rouge">NO_DATA_FOUND</code> exception gracefully by returning <code class="language-plaintext highlighter-rouge">NULL</code>.</p> <p><strong>Line 28:</strong> Declaration of the main retrieval function (<code class="language-plaintext highlighter-rouge">get_name</code>). This function returns data either from the database or the collection, depending on whether the key exists in the collection. The only parameter is the employee ID.</p> <p><strong>Lines 32-40:</strong> The core caching logic. If an element with the given ID isn’t in the collection, it’s fetched from the database and added to the collection. The exception handling is improved to return <code class="language-plaintext highlighter-rouge">NULL</code> if the employee ID is not found in the database.</p> <p><strong>Lines 46-52:</strong> The code iterates through a range of employee IDs. The first iteration fetches data from the database; subsequent iterations retrieve data from the collection.</p> <p><strong>Performance Comparison:</strong> In testing, executing 10,000 queries against a table took approximately 2 seconds, while retrieving the same data from the collection took only 0.1 seconds�a significant performance improvement (an order of magnitude faster). Caching static data also improves code quality by implicitly documenting static structures within the program.</p>]]></content><author><name></name></author><category term="database,"/><category term="performance-tuning"/><category term="plsql,"/><category term="oracle,"/><category term="performance,"/><category term="caching,"/><category term="collections"/><summary type="html"><![CDATA[Optimize PL/SQL performance by caching static data in a collection stored in the session's PGA.]]></summary></entry></feed>