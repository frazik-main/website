<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://frazik-main.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://frazik-main.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-07T11:23:30+00:00</updated><id>https://frazik-main.github.io/feed.xml</id><title type="html">Frazik</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Strategy Pattern in Java</title><link href="https://frazik-main.github.io/blog/2010/java-strategy-design-pattern/" rel="alternate" type="text/html" title="Strategy Pattern in Java"/><published>2010-10-04T10:00:00+00:00</published><updated>2010-10-04T10:00:00+00:00</updated><id>https://frazik-main.github.io/blog/2010/java-strategy-design-pattern</id><content type="html" xml:base="https://frazik-main.github.io/blog/2010/java-strategy-design-pattern/"><![CDATA[<h1 id="strategy-pattern-in-java">Strategy Pattern in Java</h1> <p>The <strong>Strategy</strong> pattern offers an alternative to the <a href="http://codingwithpassion.blogspot.com/2010/10/template-method-design-pattern.html">Template Method</a> pattern. Unlike the Template Method pattern which uses an abstract class, the Strategy pattern utilizes an interface. For a deeper understanding of encapsulating logic, refer to the post on the <a href="http://codingwithpassion.blogspot.com/2010/10/template-method-design-pattern.html">Template Method</a> pattern. This example highlights the key differences.</p> <p>You can download an example of this Java code from <a href="https://code.google.com/p/codingwithpassionblog/source/browse/trunk/src/org/codingwithpassion/patterns/strategyMethod/DecorateData.java">this Google Code repository</a>. <em>(Note: Google Code is archived; this link may not be functional.)</em></p> <h2 id="example">Example</h2> <p>In this case, the class containing the algorithm isn’t an abstract superclass but a concrete class using a helper that implements an interface defining individual steps. This pattern is useful when concrete inheritance is needed for other purposes (since Java doesn’t support multiple inheritance) or if you prefer this approach over inheriting from an abstract class. Here’s an example:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Concrete Object implementation.
 * Here we implement workflow.
 */</span>
<span class="kd">class</span> <span class="nc">CreateObject</span> <span class="o">{</span>

    <span class="kd">protected</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">datas</span> <span class="o">=</span> <span class="o">{</span><span class="s">"Kimmi"</span><span class="o">,</span> <span class="s">"Zuco"</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">21</span><span class="o">};</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setData</span><span class="o">(</span><span class="nc">Object</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">CreateObject</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">datas</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Algorithm that controls flow (IOC - Inversion of Control).
     * @return Object String representation.
     */</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">decorate</span><span class="o">(</span><span class="nc">DecoratorHelper</span> <span class="n">helper</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="n">helper</span><span class="o">.</span><span class="na">objectStart</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">datas</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Object</span> <span class="n">data</span> <span class="o">=</span> <span class="n">datas</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="k">instanceof</span> <span class="nc">String</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">helper</span><span class="o">.</span><span class="na">stringValue</span><span class="o">(</span><span class="n">sb</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="k">instanceof</span> <span class="nc">Integer</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">helper</span><span class="o">.</span><span class="na">numberValue</span><span class="o">(</span><span class="n">sb</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">helper</span><span class="o">.</span><span class="na">objectEnd</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/**
 * Helper interface to which we defer individual steps.
 */</span>
<span class="kd">interface</span> <span class="nc">DecoratorHelper</span> <span class="o">{</span>

    <span class="kt">void</span> <span class="nf">objectStart</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">);</span>

    <span class="kt">void</span> <span class="nf">objectEnd</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">);</span>

    <span class="kt">void</span> <span class="nf">stringValue</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indx</span><span class="o">);</span>

    <span class="kt">void</span> <span class="nf">numberValue</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indx</span><span class="o">);</span>
<span class="o">}</span>

<span class="cm">/**
 * Object creation for JSON objects.
 */</span>
<span class="kd">class</span> <span class="nc">JSONObject</span> <span class="kd">implements</span> <span class="nc">DecoratorHelper</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">objectStart</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\"Object\":"</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\n{"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">objectEnd</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\n}"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stringValue</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indx</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"prop"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\""</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">indx</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\":"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\""</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">value</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\","</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">numberValue</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indx</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"prop"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\""</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">indx</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\":"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">value</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">","</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/**
 * Object creation for XML objects.
 */</span>
<span class="kd">class</span> <span class="nc">XmlObject</span> <span class="kd">implements</span> <span class="nc">DecoratorHelper</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">objectStart</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;Object&gt;"</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">objectEnd</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/Object&gt;"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stringValue</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indx</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;property&gt;&lt;key&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"prop"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">indx</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/key&gt;&lt;string&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/string&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/property&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">numberValue</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indx</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;property&gt;&lt;key&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"prop"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">indx</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/key&gt;&lt;number&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/number&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/property&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/**
 * Testing...
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DecorateData</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">CreateObject</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CreateObject</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">xml</span><span class="o">.</span><span class="na">decorate</span><span class="o">(</span><span class="k">new</span> <span class="nc">XmlObject</span><span class="o">()));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Explanation:</strong></p> <ul> <li><strong>Lines 37-46:</strong> The template methods are moved into an interface. The definition remains similar to the previous example.</li> <li><strong>Lines 52-76, 82-114:</strong> In the interface implementation, subclassing is no longer necessary. Note that the access modifier of the methods must be <code class="language-plaintext highlighter-rouge">public</code> because they are accessed from outside the class hierarchy.</li> <li><strong>Line 17:</strong> The interface type must be provided to the template method. This type will be substituted with a concrete class instance at runtime (polymorphism). The method remains the same as in the Template Method example.</li> </ul> <h2 id="which-to-choose">Which to Choose?</h2> <p>The Strategy pattern, while more complex, offers greater flexibility. It represents a trade-off between concrete inheritance and delegation to an interface. The choice depends on factors such as whether the class implementing the steps needs its own inheritance hierarchy, the number of steps involved, and the number of different implementations required.</p>]]></content><author><name></name></author><category term="java,"/><category term="design-patterns"/><category term="java,"/><category term="design-patterns,"/><category term="strategy-pattern,"/><category term="template-method-pattern"/><summary type="html"><![CDATA[A comparison of the Strategy pattern with the Template Method pattern in Java, showing differences and providing a code example.]]></summary></entry><entry><title type="html">Template Method Design Pattern in Java</title><link href="https://frazik-main.github.io/blog/2010/java-template-method-pattern/" rel="alternate" type="text/html" title="Template Method Design Pattern in Java"/><published>2010-10-04T10:00:00+00:00</published><updated>2010-10-04T10:00:00+00:00</updated><id>https://frazik-main.github.io/blog/2010/java-template-method-pattern</id><content type="html" xml:base="https://frazik-main.github.io/blog/2010/java-template-method-pattern/"><![CDATA[<h1 id="template-method-design-pattern-in-java">Template Method Design Pattern in Java</h1> <h2 id="introduction">Introduction</h2> <p>This article introduces the Template Method design pattern, a powerful tool for code reuse and separation of concerns. We’ll explore its benefits and demonstrate its implementation with a Java example. The Template Method pattern leverages concrete inheritance effectively, often providing a superior approach to code reuse compared to simple concrete inheritance. While object composition can achieve similar results, the Template Method pattern offers a clean and structured way to accomplish this.</p> <h2 id="usage">Usage</h2> <p>The Template Method pattern addresses a common problem: we know the steps of an algorithm and their order, but some steps’ implementations are unknown or irrelevant at the abstract level. The pattern encapsulates these unknown steps as abstract methods within an abstract superclass. Concrete subclasses then implement these abstract methods, filling in the gaps of the superclass algorithm. The superclass controls the algorithm’s workflow, while subclasses provide the specific implementations.</p> <p>This centralized workflow logic exemplifies <em>inversion of control</em>. The superclass calls methods defined in its subclasses, a fundamental approach for clean, reusable code.</p> <h2 id="example">Example</h2> <p>This example can be placed in a single file for easy testing.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Abstract implementation -- class that controls the workflow.
 * Describes the algorithm for generic object creation.
 */</span>
<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">CreateObject</span> <span class="o">{</span>

    <span class="kd">protected</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">datas</span> <span class="o">=</span> <span class="o">{</span><span class="s">"Kimmi"</span><span class="o">,</span> <span class="s">"Zuco"</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">21</span><span class="o">};</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setData</span><span class="o">(</span><span class="nc">Object</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">CreateObject</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">datas</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Algorithm controlling the workflow (IOC - Inversion of Control).
     * @return Object String representation.
     */</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">decorate</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="n">objectStart</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">datas</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Object</span> <span class="n">data</span> <span class="o">=</span> <span class="n">datas</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="k">instanceof</span> <span class="nc">String</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">stringValue</span><span class="o">(</span><span class="n">sb</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="k">instanceof</span> <span class="nc">Integer</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">numberValue</span><span class="o">(</span><span class="n">sb</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">objectEnd</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// These methods need to be implemented in subclasses.</span>
    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">objectStart</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">);</span>

    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">objectEnd</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">);</span>

    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">stringValue</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indx</span><span class="o">);</span>

    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">numberValue</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indx</span><span class="o">);</span>
<span class="o">}</span>

<span class="cm">/**
 * Object creation for JSON objects.
 */</span>
<span class="kd">class</span> <span class="nc">JSONObject</span> <span class="kd">extends</span> <span class="nc">CreateObject</span> <span class="o">{</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">objectStart</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\"Object\":"</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\n{"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">objectEnd</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\n}"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">stringValue</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indx</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"prop"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\""</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">indx</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\":"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\""</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">value</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\","</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>

    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">numberValue</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indx</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"prop"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\""</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">indx</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\":"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">value</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">","</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/**
 * Object creation for XML objects.
 */</span>
<span class="kd">class</span> <span class="nc">XmlObject</span> <span class="kd">extends</span> <span class="nc">CreateObject</span> <span class="o">{</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">objectStart</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;object&gt;"</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">objectEnd</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/object&gt;"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">stringValue</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indx</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;property&gt;&lt;key&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"prop"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">indx</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/key&gt;&lt;string&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/string&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/property&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">numberValue</span><span class="o">(</span><span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indx</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;property&gt;&lt;key&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"prop"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">indx</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/key&gt;&lt;number&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/number&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"&lt;/property&gt;"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DecorateData</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">CreateObject</span> <span class="n">xml</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JSONObject</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">xml</span><span class="o">.</span><span class="na">decorate</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Explanation:</strong></p> <ul> <li>Lines 6-32: Define the abstract <code class="language-plaintext highlighter-rouge">CreateObject</code> class, encapsulating the workflow for creating a string representation of an object.</li> <li>Lines 18-32: Implement the core algorithm’s workflow using abstract methods (lines 35-42). These abstract methods are implemented by subclasses, demonstrating the Inversion of Control paradigm.</li> <li>Lines 49-73: A concrete subclass (<code class="language-plaintext highlighter-rouge">JSONObject</code>) implements the abstract methods to create a JSON string representation.</li> <li>Lines 79-111: Another concrete subclass (<code class="language-plaintext highlighter-rouge">XmlObject</code>) creates an XML string representation.</li> <li>Lines 112-120: Simple testing code.</li> </ul> <h2 id="conclusion">Conclusion</h2> <p>The Template Method pattern provides a clean way to separate concerns. You can create a superclass focusing on business logic and workflow, leaving subclasses to handle specific, often lower-level, operations. This approach helps avoid bugs by centralizing complex algorithms while simplifying the code in subclasses. See this <a href="http://codingwithpassion.blogspot.com/2010/10/object-oriented-design-patterns-in-java.html">post</a> for a comparison with the Strategy pattern.</p>]]></content><author><name></name></author><category term="java,"/><category term="design-patterns"/><category term="design-patterns,"/><category term="java,"/><category term="template-method,"/><category term="oop"/><summary type="html"><![CDATA[An explanation of the Template Method design pattern with a Java example.]]></summary></entry><entry><title type="html">Custom Events in jQuery - A Powerful Technique</title><link href="https://frazik-main.github.io/blog/2010/javascript-jquery-trigger/" rel="alternate" type="text/html" title="Custom Events in jQuery - A Powerful Technique"/><published>2010-09-29T10:00:00+00:00</published><updated>2010-09-29T10:00:00+00:00</updated><id>https://frazik-main.github.io/blog/2010/javascript-jquery-trigger</id><content type="html" xml:base="https://frazik-main.github.io/blog/2010/javascript-jquery-trigger/"><![CDATA[<p>This post demonstrates how to create and utilize custom events in jQuery to achieve dynamic behavior and simulate the observer pattern. We’ll leverage jQuery’s capabilities to manage event handlers on the fly, even as the DOM is modified.</p> <h3 id="live-event-handling">Live Event Handling</h3> <p>Our example uses jQuery’s <code class="language-plaintext highlighter-rouge">live()</code> method (note: <code class="language-plaintext highlighter-rouge">live()</code> is deprecated in newer jQuery versions; <code class="language-plaintext highlighter-rouge">on()</code> should be used instead for modern compatibility. This example is preserved for illustrative purposes of the original article) to manage event handlers dynamically. This means we can proactively establish event handlers for elements that don’t yet exist in the DOM. The syntax is similar to <code class="language-plaintext highlighter-rouge">bind()</code> or <code class="language-plaintext highlighter-rouge">click()</code>.</p> <h3 id="triggering-events">Triggering Events</h3> <p>We’ll use the <code class="language-plaintext highlighter-rouge">trigger()</code> method to invoke (trigger) event handlers programmatically. <code class="language-plaintext highlighter-rouge">trigger()</code> simulates the event, populating a jQuery event object. Note that properties reflecting event-specific values (like mouse coordinates) will not have values in this simulated context.</p> <h3 id="example">Example</h3> <p>Let’s examine the jQuery and HTML code.</p> <h4 id="jquery-code">jQuery Code</h4> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Wait until DOM is fully loaded</span>
  <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#addBox</span><span class="dl">"</span><span class="p">).</span><span class="nf">click</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">td.box:first-child</span><span class="dl">"</span><span class="p">).</span><span class="nf">clone</span><span class="p">().</span><span class="nf">appendTo</span><span class="p">(</span><span class="dl">"</span><span class="s2">tr.boxLine</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#paintBlue</span><span class="dl">"</span><span class="p">).</span><span class="nf">click</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">td.box</span><span class="dl">"</span><span class="p">).</span><span class="nf">trigger</span><span class="p">(</span><span class="dl">"</span><span class="s2">paintThem</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">td.box</span><span class="dl">"</span><span class="p">).</span><span class="nf">live</span><span class="p">(</span><span class="dl">"</span><span class="s2">paintThem</span><span class="dl">"</span><span class="p">,</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">//Note: live() is deprecated. Use on() for modern jQuery</span>
    <span class="nf">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nf">css</span><span class="p">(</span><span class="dl">"</span><span class="s2">background</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div> <ol> <li>A <code class="language-plaintext highlighter-rouge">click</code> handler adds a new box-like element to the DOM by cloning an existing table data element.</li> <li>Another <code class="language-plaintext highlighter-rouge">click</code> handler triggers a custom event named “paintThem” on all elements with the class <code class="language-plaintext highlighter-rouge">box</code>.</li> <li>The <code class="language-plaintext highlighter-rouge">live()</code> method (or <code class="language-plaintext highlighter-rouge">on()</code> in modern jQuery) establishes the handler for the custom “paintThem” event. This ensures that any elements with the class <code class="language-plaintext highlighter-rouge">box</code>, even those added dynamically, will respond to the event.</li> </ol> <h4 id="html-code">HTML Code</h4> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table&gt;</span>
  <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">"boxLine"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">"box"</span> <span class="na">style=</span><span class="s">"width:35px; height: 35px; background:red;"</span><span class="nt">&gt;&lt;/td&gt;</span>
  <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"operations"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"addBox"</span><span class="nt">&gt;</span>Add box<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"paintBlue"</span><span class="nt">&gt;</span>Paint Boxes<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>This simple HTML creates a table with a red box and two buttons: one to add more boxes and another to trigger the custom event to change their color.</p> <h3 id="custom-events-and-the-observer-pattern">Custom Events and the Observer Pattern</h3> <p>Custom events provide a powerful mechanism for loosely coupling elements and their behaviors. They offer a simplified version of the observer (or publish/subscribe) pattern, enabling cleaner and more maintainable code. By triggering the event, any registered handlers automatically execute without the need for explicit calls, promoting loose coupling and easier management of dynamic behaviors. This makes the code more robust and easier to maintain, especially when dealing with asynchronous updates (like AJAX calls).</p> <p><strong>(Images from the original post were omitted as they were not directly reproducible in this markdown format.)</strong></p>]]></content><author><name></name></author><category term="javascript,"/><category term="jquery"/><category term="jQuery,"/><category term="custom"/><category term="events,"/><category term="observer"/><category term="pattern,"/><category term="javascript"/><summary type="html"><![CDATA[Learn how to create and use custom events in jQuery to simulate the observer pattern and build dynamic web applications.]]></summary></entry><entry><title type="html">Using PL/SQL’s ANY Types for Dynamic Typing</title><link href="https://frazik-main.github.io/blog/2010/dynamic-typing-plsql/" rel="alternate" type="text/html" title="Using PL/SQL’s ANY Types for Dynamic Typing"/><published>2010-09-28T10:00:00+00:00</published><updated>2010-09-28T10:00:00+00:00</updated><id>https://frazik-main.github.io/blog/2010/dynamic-typing-plsql</id><content type="html" xml:base="https://frazik-main.github.io/blog/2010/dynamic-typing-plsql/"><![CDATA[<p>PL/SQL is a statically-typed language. Data types must be declared and checked at compile time. However, situations arise where dynamic typing is necessary. For these cases, PL/SQL introduced <code class="language-plaintext highlighter-rouge">ANY</code> types (starting in Oracle 9i). These dynamic data types allow manipulation of data whose type isn’t known until runtime. The type is determined at runtime using introspection (e.g., the <code class="language-plaintext highlighter-rouge">gettype</code> function).</p> <p>You cannot directly manipulate the internal structure of <code class="language-plaintext highlighter-rouge">ANY</code> types; procedures and functions are required. The main <code class="language-plaintext highlighter-rouge">ANY</code> type family members are:</p> <ul> <li><code class="language-plaintext highlighter-rouge">AnyData</code> (holds a single value of any type, including built-in scalar datatypes and user-defined object types).</li> <li><code class="language-plaintext highlighter-rouge">AnyType</code> (holds a type description).</li> </ul> <p>The following example demonstrates a heterogeneous array of transport means using <code class="language-plaintext highlighter-rouge">SYS.AnyType</code>. Three user-defined types represent different transport types:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">TYPE</span> <span class="n">airplane_o</span> <span class="k">AS</span> <span class="k">OBJECT</span> <span class="p">(</span>
    <span class="n">engine_type</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">35</span><span class="p">),</span>
    <span class="n">lift</span> <span class="n">NUMBER</span>
<span class="p">)</span> <span class="o">/</span>

<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">TYPE</span> <span class="n">car_o</span> <span class="k">AS</span> <span class="k">OBJECT</span> <span class="p">(</span>
    <span class="n">engine_power</span> <span class="n">NUMBER</span><span class="p">,</span>
    <span class="n">color</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">35</span><span class="p">)</span>
<span class="p">)</span> <span class="o">/</span>

<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">TYPE</span> <span class="n">train_o</span> <span class="k">AS</span> <span class="k">OBJECT</span> <span class="p">(</span>
    <span class="n">engine_type</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">35</span><span class="p">),</span>
    <span class="n">speed</span> <span class="n">NUMBER</span>
<span class="p">)</span> <span class="o">/</span>

<span class="k">SET</span> <span class="n">SERVEROUTPUT</span> <span class="k">ON</span><span class="p">;</span>

<span class="k">DECLARE</span>
    <span class="k">TYPE</span> <span class="n">transports_t</span> <span class="k">IS</span> <span class="n">VARRAY</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="k">OF</span> <span class="n">SYS</span><span class="p">.</span><span class="n">AnyData</span><span class="p">;</span>
    <span class="n">transports</span> <span class="n">transports_t</span><span class="p">;</span>
    <span class="n">airplane</span> <span class="n">airplane_o</span><span class="p">;</span>
    <span class="n">car</span> <span class="n">car_o</span><span class="p">;</span>
    <span class="n">train</span> <span class="n">train_o</span><span class="p">;</span>
    <span class="n">ret_val</span> <span class="n">NUMBER</span><span class="p">;</span>
<span class="k">BEGIN</span>
    <span class="n">transports</span> <span class="p">:</span><span class="o">=</span> <span class="n">transports_t</span><span class="p">(</span>
        <span class="n">AnyData</span><span class="p">.</span><span class="n">ConvertObject</span><span class="p">(</span><span class="n">airplane_o</span><span class="p">(</span><span class="s1">'turboprop'</span><span class="p">,</span> <span class="mi">2300</span><span class="p">)),</span>
        <span class="n">AnyData</span><span class="p">.</span><span class="n">ConvertObject</span><span class="p">(</span><span class="n">airplane_o</span><span class="p">(</span><span class="s1">'jet'</span><span class="p">,</span> <span class="mi">3500</span><span class="p">)),</span>
        <span class="n">AnyData</span><span class="p">.</span><span class="n">ConvertObject</span><span class="p">(</span><span class="n">car_o</span><span class="p">(</span><span class="mi">55</span><span class="p">,</span> <span class="s1">'red'</span><span class="p">)),</span>
        <span class="n">AnyData</span><span class="p">.</span><span class="n">ConvertObject</span><span class="p">(</span><span class="n">train_o</span><span class="p">(</span><span class="s1">'electric'</span><span class="p">,</span> <span class="mi">80</span><span class="p">)),</span>
        <span class="n">AnyData</span><span class="p">.</span><span class="n">ConvertObject</span><span class="p">(</span><span class="n">train_o</span><span class="p">(</span><span class="s1">'steam'</span><span class="p">,</span> <span class="mi">45</span><span class="p">)),</span>
        <span class="n">AnyData</span><span class="p">.</span><span class="n">ConvertObject</span><span class="p">(</span><span class="n">airplane_o</span><span class="p">(</span><span class="s1">'ramjet'</span><span class="p">,</span> <span class="mi">9000</span><span class="p">))</span>
    <span class="p">);</span>

    <span class="k">FOR</span> <span class="n">i</span> <span class="k">IN</span> <span class="mi">1</span> <span class="p">..</span> <span class="n">transports</span><span class="p">.</span><span class="k">COUNT</span> <span class="n">LOOP</span>
        <span class="n">IF</span> <span class="n">transports</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetTypeName</span> <span class="o">=</span> <span class="s1">'HR.AIRPLANE_O'</span> <span class="k">THEN</span>
            <span class="n">ret_val</span> <span class="p">:</span><span class="o">=</span> <span class="n">transports</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetObject</span><span class="p">(</span><span class="n">airplane</span><span class="p">);</span>
            <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="s1">'Airplane: '</span> <span class="o">||</span> <span class="s1">'engine type: '</span> <span class="o">||</span>
                                 <span class="n">airplane</span><span class="p">.</span><span class="n">engine_type</span> <span class="o">||</span> <span class="s1">', lift: '</span> <span class="o">||</span> <span class="n">airplane</span><span class="p">.</span><span class="n">lift</span> <span class="o">||</span> <span class="s1">'lbs'</span><span class="p">);</span>
        <span class="n">ELSIF</span> <span class="n">transports</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetTypeName</span> <span class="o">=</span> <span class="s1">'HR.CAR_O'</span> <span class="k">THEN</span>
            <span class="n">ret_val</span> <span class="p">:</span><span class="o">=</span> <span class="n">transports</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetObject</span><span class="p">(</span><span class="n">car</span><span class="p">);</span>
            <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="s1">'Car: '</span> <span class="o">||</span> <span class="s1">'engine power: '</span> <span class="o">||</span>
                                 <span class="n">car</span><span class="p">.</span><span class="n">engine_power</span> <span class="o">||</span> <span class="s1">'KW, color: '</span> <span class="o">||</span> <span class="n">car</span><span class="p">.</span><span class="n">color</span><span class="p">);</span>
        <span class="n">ELSIF</span> <span class="n">transports</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetTypeName</span> <span class="o">=</span> <span class="s1">'HR.TRAIN_O'</span> <span class="k">THEN</span>
            <span class="n">ret_val</span> <span class="p">:</span><span class="o">=</span> <span class="n">transports</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">GetObject</span><span class="p">(</span><span class="n">train</span><span class="p">);</span>
            <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="s1">'Train: '</span> <span class="o">||</span> <span class="s1">'engine type: '</span> <span class="o">||</span>
                                 <span class="n">train</span><span class="p">.</span><span class="n">engine_type</span> <span class="o">||</span> <span class="s1">', speed: '</span> <span class="o">||</span> <span class="n">train</span><span class="p">.</span><span class="n">speed</span> <span class="o">||</span> <span class="s1">'KMh'</span><span class="p">);</span>
        <span class="k">END</span> <span class="n">IF</span><span class="p">;</span>
    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p><strong>Code Explanation:</strong></p> <ul> <li><strong>Lines 1-9:</strong> Define the object types <code class="language-plaintext highlighter-rouge">airplane_o</code>, <code class="language-plaintext highlighter-rouge">car_o</code>, and <code class="language-plaintext highlighter-rouge">train_o</code>.</li> <li><strong>Lines 12-16:</strong> Declare variables: a VARRAY <code class="language-plaintext highlighter-rouge">transports_t</code> to hold <code class="language-plaintext highlighter-rouge">AnyData</code> objects, and variables for each transport type.</li> <li><strong>Lines 19-27:</strong> Populate the <code class="language-plaintext highlighter-rouge">transports</code> VARRAY with instances of the object types, converting them to <code class="language-plaintext highlighter-rouge">AnyData</code> using <code class="language-plaintext highlighter-rouge">AnyData.ConvertObject</code>.</li> <li><strong>Lines 29-48:</strong> Loop through the <code class="language-plaintext highlighter-rouge">transports</code> array. <code class="language-plaintext highlighter-rouge">transports(i).GetTypeName</code> retrieves the type name. Based on the type, the appropriate object is retrieved using <code class="language-plaintext highlighter-rouge">GetObject</code>, and its properties are printed to the console.</li> </ul> <p>Running this code (after replacing <code class="language-plaintext highlighter-rouge">HR</code> with your schema name if necessary) will output information about each transport, demonstrating the dynamic handling of different object types using <code class="language-plaintext highlighter-rouge">ANY</code> types. Note that error handling (checking the return value of <code class="language-plaintext highlighter-rouge">GetObject</code>) has been omitted for brevity. In a production environment, proper error handling should be included.</p>]]></content><author><name></name></author><category term="database,"/><category term="plsql"/><category term="plsql,"/><category term="anytype,"/><category term="anydata,"/><category term="dynamic-typing,"/><category term="oracle"/><summary type="html"><![CDATA[Exploring PL/SQL's ANY types for handling data of unknown type at runtime.]]></summary></entry><entry><title type="html">Using PL/SQL Collections to Optimize Data Retrieval</title><link href="https://frazik-main.github.io/blog/2010/plsq-cut-down-round-trips/" rel="alternate" type="text/html" title="Using PL/SQL Collections to Optimize Data Retrieval"/><published>2010-09-14T10:00:00+00:00</published><updated>2010-09-14T10:00:00+00:00</updated><id>https://frazik-main.github.io/blog/2010/plsq-cut-down-round-trips</id><content type="html" xml:base="https://frazik-main.github.io/blog/2010/plsq-cut-down-round-trips/"><![CDATA[<p>Introduction</p> <p>Using PL/SQL collections, you can combine master and detail tables in a single SELECT statement, converting detail records into a collection type. This significantly improves performance for data-intensive applications by reducing the number of round trips to the database. This avoids the overhead of duplicating the master record for each detail record.</p> <p>Consider this SELECT statement in a simplified HR application:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>
    <span class="n">d</span><span class="p">.</span><span class="n">department_id</span><span class="p">,</span>
    <span class="n">d</span><span class="p">.</span><span class="n">department_name</span><span class="p">,</span>
    <span class="n">e</span><span class="p">.</span><span class="n">employee_id</span><span class="p">,</span>
    <span class="n">e</span><span class="p">.</span><span class="n">first_name</span><span class="p">,</span>
    <span class="n">e</span><span class="p">.</span><span class="n">last_name</span>
<span class="k">FROM</span> <span class="n">departments</span> <span class="n">d</span>
<span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">employees</span> <span class="n">e</span>
    <span class="k">ON</span> <span class="n">d</span><span class="p">.</span><span class="n">department_id</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">department_id</span><span class="p">;</span>
</code></pre></div></div> <p>Here, <code class="language-plaintext highlighter-rouge">departments</code> is the master table and <code class="language-plaintext highlighter-rouge">employees</code> is the detail table. For each department, there are zero or more employees.</p> <p>Now, consider this example using PL/SQL collections:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SET</span> <span class="n">SERVEROUTPUT</span> <span class="k">ON</span>

<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">TYPE</span> <span class="n">employees_ids_t</span> <span class="k">AS</span> <span class="k">TABLE</span> <span class="k">OF</span> <span class="n">NUMBER</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
<span class="o">/</span>

<span class="k">DECLARE</span>
    <span class="k">CURSOR</span> <span class="n">dep_emp_cur</span> <span class="k">IS</span>
        <span class="k">SELECT</span>
                <span class="n">d</span><span class="p">.</span><span class="n">department_id</span><span class="p">,</span>
                <span class="n">d</span><span class="p">.</span><span class="n">department_name</span><span class="p">,</span>
            <span class="k">CAST</span><span class="p">(</span><span class="n">MULTISET</span><span class="p">(</span><span class="k">SELECT</span> <span class="n">e</span><span class="p">.</span><span class="n">employee_id</span>
                        <span class="k">FROM</span> <span class="n">employees</span> <span class="n">e</span>
                        <span class="k">WHERE</span> <span class="n">d</span><span class="p">.</span><span class="n">department_id</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">department_id</span><span class="p">)</span>
            <span class="k">AS</span> <span class="n">employees_ids_t</span><span class="p">)</span> <span class="k">AS</span> <span class="n">emp_collection</span>
         <span class="k">FROM</span> <span class="n">departments</span> <span class="n">d</span><span class="p">;</span>
    <span class="n">dep_emp_row</span> <span class="n">dep_emp_cur</span><span class="o">%</span><span class="n">ROWTYPE</span><span class="p">;</span>
    <span class="n">row_index</span> <span class="n">PLS_INTEGER</span><span class="p">;</span>

<span class="k">BEGIN</span>
    <span class="k">OPEN</span> <span class="n">dep_emp_cur</span><span class="p">;</span>

    <span class="n">LOOP</span>
        <span class="k">FETCH</span> <span class="n">dep_emp_cur</span> <span class="k">INTO</span> <span class="n">dep_emp_row</span><span class="p">;</span>

        <span class="n">EXIT</span> <span class="k">WHEN</span> <span class="n">dep_emp_cur</span><span class="o">%</span><span class="n">NOTFOUND</span><span class="p">;</span>

        <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">dep_emp_row</span><span class="p">.</span><span class="n">department_id</span> <span class="o">||</span> <span class="s1">', '</span>
                <span class="o">||</span> <span class="n">dep_emp_row</span><span class="p">.</span><span class="n">department_name</span> <span class="o">||</span> <span class="s1">': employees: '</span><span class="p">);</span>

        <span class="n">row_index</span> <span class="p">:</span><span class="o">=</span> <span class="n">dep_emp_row</span><span class="p">.</span><span class="n">emp_collection</span><span class="p">.</span><span class="k">FIRST</span><span class="p">;</span>
        <span class="n">LOOP</span>
            <span class="n">EXIT</span> <span class="k">WHEN</span> <span class="n">row_index</span> <span class="k">IS</span> <span class="k">NULL</span><span class="p">;</span>

            <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">dep_emp_row</span><span class="p">.</span><span class="n">emp_collection</span><span class="p">(</span><span class="n">row_index</span><span class="p">)</span> <span class="o">||</span> <span class="s1">', '</span><span class="p">);</span>

            <span class="n">row_index</span> <span class="p">:</span><span class="o">=</span> <span class="n">dep_emp_row</span><span class="p">.</span><span class="n">emp_collection</span><span class="p">.</span><span class="k">NEXT</span><span class="p">(</span><span class="n">row_index</span><span class="p">);</span>

        <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>

        <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="s1">''</span><span class="p">);</span>

    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>

    <span class="k">CLOSE</span> <span class="n">dep_emp_cur</span><span class="p">;</span>

<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p>The simple JOIN repeats the master table for each detail record. However, the PL/SQL code produces a different result: it combines the master and detail data into single rows, eliminating master record repetition. This approach is significantly more efficient. (Images illustrating the difference would be included here if available.)</p> <p>This demonstrates the power of using PL/SQL collections for efficient data retrieval and processing. By consolidating data from multiple tables into a single result set, you greatly reduce database load and improve application performance.</p>]]></content><author><name></name></author><category term="Database"/><category term="Programming"/><category term="PLSQL,"/><category term="Oracle,"/><category term="Database,"/><category term="Performance"/><category term="Optimization,"/><category term="Collections"/><summary type="html"><![CDATA[Learn how to use PL/SQL collections to combine master and detail tables in a single SELECT statement, reducing database round trips and improving performance.]]></summary></entry><entry><title type="html">JavaScript Closures - A Deep Dive</title><link href="https://frazik-main.github.io/blog/2010/javascript-concepts-part4/" rel="alternate" type="text/html" title="JavaScript Closures - A Deep Dive"/><published>2010-09-07T10:00:00+00:00</published><updated>2010-09-07T10:00:00+00:00</updated><id>https://frazik-main.github.io/blog/2010/javascript-concepts-part4</id><content type="html" xml:base="https://frazik-main.github.io/blog/2010/javascript-concepts-part4/"><![CDATA[<p>This post delves into the concept of closures in JavaScript. Closures are often a challenging concept for programmers coming from traditional object-oriented or procedural backgrounds, but they’re a fundamental and powerful tool for writing effective JavaScript code, especially when dealing with asynchronous operations.</p> <p><strong>Introduction</strong></p> <p>JavaScript is a ubiquitous language in web development, but many developers don’t fully utilize its deeper features. This series explores some of these advanced concepts. This is the final article in this short tutorial.</p> <p><strong>Closures</strong></p> <p>Simply put, a closure in JavaScript is a function instance coupled with its surrounding environment. This environment includes variables declared <em>outside</em> the function’s immediate scope (but accessible to it). Essentially, it’s a function “remembering” its creation context, even after that context has gone out of scope.</p> <p>When a function is declared, it retains access to all variables within its scope at the time of declaration. The key here is that this access to “outer” variables persists <em>even after</em> that outer scope is no longer active. This persistence is what constitutes the “closure”.</p> <p>This feature is crucial for many JavaScript programming patterns, particularly when dealing with asynchronous callbacks. Let’s examine an example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">local</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nf">setInterval</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="nx">local</span><span class="p">);</span>
  <span class="nx">local</span><span class="o">++</span><span class="p">;</span>
<span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>
</code></pre></div></div> <p>In this example, we declare a variable <code class="language-plaintext highlighter-rouge">local</code> and assign it the value 1. We then use <code class="language-plaintext highlighter-rouge">setInterval</code> to create a timer that executes a function every 3 seconds. The callback function within <code class="language-plaintext highlighter-rouge">setInterval</code> references the outer variable <code class="language-plaintext highlighter-rouge">local</code>, and it increments this variable with each execution.</p> <p>You might expect that, since the timer function executes <em>after</em> the initial script has finished (and <code class="language-plaintext highlighter-rouge">local</code>’s scope is technically gone), <code class="language-plaintext highlighter-rouge">local</code> would be undefined. However, this doesn’t happen. The closure ensures that the callback function retains access to the <code class="language-plaintext highlighter-rouge">local</code> variable throughout the lifetime of the timer.</p> <p>This persistent access is the essence of closures. Although the initial scope containing <code class="language-plaintext highlighter-rouge">local</code> is gone, the closure created by the function and <code class="language-plaintext highlighter-rouge">local</code> remains active.</p> <p>This concludes our series. I hope you found these concepts helpful and informative!</p>]]></content><author><name></name></author><category term="javascript-concepts"/><category term="javascript,"/><category term="closures,"/><category term="asynchronous,"/><category term="programming"/><summary type="html"><![CDATA[Understanding closures in JavaScript, a powerful concept for handling asynchronous callbacks.]]></summary></entry><entry><title type="html">JavaScript Concepts - Callbacks and Function Context</title><link href="https://frazik-main.github.io/blog/2010/javascript-concepts-part3/" rel="alternate" type="text/html" title="JavaScript Concepts - Callbacks and Function Context"/><published>2010-09-06T10:00:00+00:00</published><updated>2010-09-06T10:00:00+00:00</updated><id>https://frazik-main.github.io/blog/2010/javascript-concepts-part3</id><content type="html" xml:base="https://frazik-main.github.io/blog/2010/javascript-concepts-part3/"><![CDATA[<h1 id="javascript-concepts-part-3---callbacks-and-function-context">JavaScript Concepts: Part 3 - Callbacks and Function Context</h1> <p>JavaScript is widely used on the web, but its deeper concepts are often overlooked. This article, the third in a series, explores how functions work in JavaScript, focusing on callbacks and function context.</p> <h2 id="function-callbacks">Function Callbacks</h2> <p>Web page code is asynchronous, and so are JavaScript functions. A crucial concept in asynchronous programming is the <em>callback</em> function.</p> <p>Consider this example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">myarray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">22</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">105</span><span class="p">];</span>

<span class="kd">function</span> <span class="nf">sortAscending</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">myarray</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="nx">sortAscending</span><span class="p">);</span>

<span class="nf">alert</span><span class="p">(</span><span class="nx">myarray</span><span class="p">);</span> <span class="c1">//Alerts the sorted array: 1, 3, 5, 21, 22, 105</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">sort</code> function uses <code class="language-plaintext highlighter-rouge">sortAscending</code> as a reference. Passing a function as a parameter is like passing any other value. Because the <code class="language-plaintext highlighter-rouge">sort</code> function <em>calls back</em> to our custom function, this is called a <em>callback</em> function.</p> <p>Callbacks are often defined as anonymous functions for brevity:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">myarray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">22</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">105</span><span class="p">];</span>

<span class="nx">myarray</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">});</span>

<span class="nf">alert</span><span class="p">(</span><span class="nx">myarray</span><span class="p">);</span> <span class="c1">//Alerts the sorted array: 1, 3, 5, 21, 22, 105</span>
</code></pre></div></div> <p>I prefer declared functions because their reusability is clearer and they avoid a “hack-like” appearance.</p> <h2 id="function-context">Function Context</h2> <p>Object-oriented languages use <code class="language-plaintext highlighter-rouge">this</code> to reference the current object instance. JavaScript also uses <code class="language-plaintext highlighter-rouge">this</code>, but its behavior differs subtly yet significantly.</p> <p>In JavaScript, the context (<code class="language-plaintext highlighter-rouge">this</code>) of a function is the object that contains the reference used to invoke the function. This is best understood with an example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">desc</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">address</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">yearBuild</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">house</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">noOfdoors</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="na">address</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Main road 51</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">yearBuild</span><span class="p">:</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="mi">2001</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span>
  <span class="na">description</span><span class="p">:</span> <span class="nx">desc</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">house</span><span class="p">.</span><span class="nf">description</span><span class="p">();</span> <span class="c1">// Works correctly</span>
</code></pre></div></div> <p>This alert box works because <code class="language-plaintext highlighter-rouge">this</code> refers to the <code class="language-plaintext highlighter-rouge">house</code> object. However, calling <code class="language-plaintext highlighter-rouge">desc()</code> in the global scope will fail unless variables <code class="language-plaintext highlighter-rouge">address</code> and <code class="language-plaintext highlighter-rouge">yearBuild</code> are also defined in the global scope:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">desc</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">address</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">yearBuild</span><span class="p">);</span>
<span class="p">};</span>

<span class="nx">address</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Some road from Window</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">yearBuild</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="mi">2002</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
<span class="nf">desc</span><span class="p">();</span> <span class="c1">//Works because 'this' refers to the window object.</span>
</code></pre></div></div> <p>In JavaScript, the object referenced by <code class="language-plaintext highlighter-rouge">this</code> is determined by <em>how</em> the function is invoked, not by how it’s declared. The same function can have different contexts depending on the call.</p> <p>JavaScript provides ways to explicitly control the function context using the <code class="language-plaintext highlighter-rouge">call()</code> or <code class="language-plaintext highlighter-rouge">apply()</code> methods. <code class="language-plaintext highlighter-rouge">call()</code> invokes the function, specifying the context as its first parameter. The remaining parameters are passed to the function. <code class="language-plaintext highlighter-rouge">apply()</code> is similar but uses an array of parameters.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">showMe</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">me</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">m1</span> <span class="o">=</span> <span class="p">{</span> <span class="na">me</span><span class="p">:</span> <span class="dl">"</span><span class="s2">meFirst</span><span class="dl">"</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">m2</span> <span class="o">=</span> <span class="p">{</span> <span class="na">me</span><span class="p">:</span> <span class="dl">"</span><span class="s2">meSecond</span><span class="dl">"</span> <span class="p">};</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">me</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">meWindow</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">m1</span><span class="p">.</span><span class="nx">whoAmI</span> <span class="o">=</span> <span class="nx">showMe</span><span class="p">;</span>

<span class="nf">alert</span><span class="p">(</span><span class="nf">showMe</span><span class="p">());</span> <span class="c1">// meWindow (global context)</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">m1</span><span class="p">.</span><span class="nf">whoAmI</span><span class="p">());</span> <span class="c1">// meFirst (m1 context)</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">showMe</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nx">m2</span><span class="p">));</span> <span class="c1">// meSecond (m2 context)</span>
</code></pre></div></div> <p>The first alert uses the global context. The second uses <code class="language-plaintext highlighter-rouge">m1</code>’s context. The third explicitly sets the context to <code class="language-plaintext highlighter-rouge">m2</code>.</p> <p>In summary, understanding <code class="language-plaintext highlighter-rouge">this</code> and callback functions is essential for working effectively with asynchronous JavaScript. This is the end of Part 3; continue to <a href="http://codingwithpassion.blogspot.com/2010/09/javascript-concepts-part-4-closures.html">Part 4</a> (closures) for more.</p>]]></content><author><name></name></author><category term="javascript-concepts"/><category term="javascript,"/><category term="callbacks,"/><category term="function-context,"/><category term="this"/><summary type="html"><![CDATA[A deep dive into JavaScript callbacks and function context, exploring how `this` works and how to manage function contexts using `call()`]]></summary></entry><entry><title type="html">Storing Collections in Database Columns</title><link href="https://frazik-main.github.io/blog/2010/plsql-collections-as-columns/" rel="alternate" type="text/html" title="Storing Collections in Database Columns"/><published>2010-09-06T10:00:00+00:00</published><updated>2010-09-06T10:00:00+00:00</updated><id>https://frazik-main.github.io/blog/2010/plsql-collections-as-columns</id><content type="html" xml:base="https://frazik-main.github.io/blog/2010/plsql-collections-as-columns/"><![CDATA[<p>This post demonstrates how to store collections in database columns within a relational table. This technique is useful for persisting collection data without creating additional detail tables. While common in object databases like Google App Engine Bigtable, this approach is also applicable to relational databases.</p> <h3 id="simple-example">Simple Example</h3> <p>This example uses a <code class="language-plaintext highlighter-rouge">VARRAY</code> (you can also use a nested table � see <a href="http://codingwithpassion.blogspot.com/2010/09/oracle-plsql-collections.html">this article</a> about PL/SQL collections) as a column in a relational table.</p> <p>First, a schema-level collection type <code class="language-plaintext highlighter-rouge">varchar_collection_t</code> is declared, capable of holding up to four <code class="language-plaintext highlighter-rouge">VARCHAR2</code> elements. Then, a table <code class="language-plaintext highlighter-rouge">animes</code> is created with a column <code class="language-plaintext highlighter-rouge">characters</code> of this collection type. Finally, a collection is populated and inserted into the <code class="language-plaintext highlighter-rouge">animes</code> table.</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TYPE</span> <span class="n">varchar_collection_t</span> <span class="k">IS</span> <span class="n">VARRAY</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="k">OF</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="o">/</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">animes</span> <span class="p">(</span>
    <span class="n">name</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">characters</span> <span class="n">varchar_collection_t</span>
<span class="p">);</span>

<span class="k">DECLARE</span>
    <span class="n">anime_characters</span> <span class="n">varchar_collection_t</span> <span class="p">:</span><span class="o">=</span> <span class="n">varchar_collection_t</span><span class="p">();</span>
<span class="k">BEGIN</span>
    <span class="n">anime_characters</span><span class="p">.</span><span class="n">EXTEND</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>

    <span class="n">anime_characters</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Satsuki'</span><span class="p">;</span>
    <span class="n">anime_characters</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Mei'</span><span class="p">;</span>
    <span class="n">anime_characters</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Totoro'</span><span class="p">;</span>
    <span class="n">anime_characters</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Kanta'</span><span class="p">;</span>

    <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">animes</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">characters</span><span class="p">)</span>
    <span class="k">VALUES</span> <span class="p">(</span><span class="s1">'My Neighbor Totoro'</span><span class="p">,</span> <span class="n">anime_characters</span><span class="p">);</span>

<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p>As shown, a simple <code class="language-plaintext highlighter-rouge">INSERT</code> statement is used to insert the collection into the table. <code class="language-plaintext highlighter-rouge">VARRAY</code> columns store collection data inline (similar to comma-separated values), while nested tables create a separate database table behind the scenes. Oracle recommends <code class="language-plaintext highlighter-rouge">VARRAY</code> for smaller arrays and nested tables for larger ones.</p> <p>One important note: you cannot directly manipulate data within a stored collection. You need to use <code class="language-plaintext highlighter-rouge">CAST</code> and <code class="language-plaintext highlighter-rouge">TABLE</code> syntax. This example shows how to filter using data from the collection:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">animes</span> <span class="n">a</span>
<span class="k">WHERE</span> <span class="s1">'Mei'</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="k">TABLE</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">characters</span><span class="p">));</span>
</code></pre></div></div> <p>Notice the use of the <code class="language-plaintext highlighter-rouge">TABLE</code> syntax. Even with only one row in the table, this demonstrates the concept effectively.</p>]]></content><author><name></name></author><category term="database-design"/><category term="oracle,"/><category term="plsql,"/><category term="database,"/><category term="collections,"/><category term="varray,"/><category term="nested"/><category term="table"/><summary type="html"><![CDATA[Demonstrates how to store collections in database columns using Oracle's VARRAY.]]></summary></entry><entry><title type="html">JavaScript Functions - A Deep Dive</title><link href="https://frazik-main.github.io/blog/2010/javascript-concepts-part2/" rel="alternate" type="text/html" title="JavaScript Functions - A Deep Dive"/><published>2010-09-05T00:00:00+00:00</published><updated>2010-09-05T00:00:00+00:00</updated><id>https://frazik-main.github.io/blog/2010/javascript-concepts-part2</id><content type="html" xml:base="https://frazik-main.github.io/blog/2010/javascript-concepts-part2/"><![CDATA[<p>This post delves into the often-overlooked deeper aspects of JavaScript functions.</p> <h2 id="introduction">Introduction</h2> <p>JavaScript, a ubiquitous language on the web, is frequently used without a thorough understanding of its underlying mechanisms. This “JavaScript Concepts” series aims to illuminate some of these deeper concepts. This article provides a concise overview of JavaScript functions.</p> <h2 id="functions-the-core-idea">Functions: The Core Idea</h2> <p>In many traditional object-oriented languages (Java, C++, C#, etc.), objects encapsulate both data and methods. These languages treat data and methods as distinct entities. Methods modify an object’s state by altering its properties (fields).</p> <p>JavaScript takes a different approach.</p> <p>In JavaScript, <strong>functions are considered objects</strong>. There’s no distinction between object types like <code class="language-plaintext highlighter-rouge">String</code>, <code class="language-plaintext highlighter-rouge">Number</code>, <code class="language-plaintext highlighter-rouge">window</code> objects, custom objects, and <em>functions</em>. Functions are defined by a constructor named “Function,” similar to constructors in other object-oriented languages.</p> <p>A function can have parameters, and its value (being an object) can be assigned to a variable, a property of an object, returned as a function’s return value, or passed as a parameter to another function. This is all possible because functions in JavaScript are treated like other objects. Therefore, we say that functions are <strong>first-class objects</strong> in JavaScript.</p> <h3 id="example-functions">Example Functions:</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">one</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">doStuff</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">two</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">calculate stuff</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">three</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">stuff</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="function-names">Function Names</h2> <p>Consider this example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">findMatrix</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello Neo, what is the Matrix?</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>This does <em>not</em> create a function named “findMatrix” in the way you might expect. While the syntax may seem familiar, it’s essentially syntactic sugar (a feature JavaScript is known for) similar to using <code class="language-plaintext highlighter-rouge">var</code> to create <code class="language-plaintext highlighter-rouge">window</code> properties (as discussed in a previous article about JavaScript objects). It creates a function instance and assigns it to the <code class="language-plaintext highlighter-rouge">window</code> property using the function’s name, as shown below:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">findMatrix</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello Neo, what is the Matrix?</span><span class="dl">"</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div> <p>When declaring a top-level named function, a <code class="language-plaintext highlighter-rouge">Function</code> instance is created and assigned to a property (with the function’s name) of the <code class="language-plaintext highlighter-rouge">window</code> object.</p> <p>While this might seem like a subtle detail, it’s crucial to understand that <code class="language-plaintext highlighter-rouge">Function</code> instances are <strong>values</strong> that can be assigned to variables, properties, or parameters, just like instances of other object types. Importantly, these function instances are useless unless assigned to a variable, property, or parameter.</p>]]></content><author><name></name></author><category term="javascript-concepts"/><category term="javascript,"/><category term="functions,"/><category term="programming"/><summary type="html"><![CDATA[Exploring the deeper concepts of JavaScript functions, including their object nature and first-class status.]]></summary></entry><entry><title type="html">JavaScript Concepts - Objects</title><link href="https://frazik-main.github.io/blog/2010/javascript-concepts-part1/" rel="alternate" type="text/html" title="JavaScript Concepts - Objects"/><published>2010-09-04T10:00:00+00:00</published><updated>2010-09-04T10:00:00+00:00</updated><id>https://frazik-main.github.io/blog/2010/javascript-concepts-part1</id><content type="html" xml:base="https://frazik-main.github.io/blog/2010/javascript-concepts-part1/"><![CDATA[<h1 id="javascript-concepts-objects">JavaScript Concepts: Objects</h1> <h2 id="introduction">Introduction</h2> <p>JavaScript is a widely used web language, but many page authors don’t utilize its deeper concepts. This “JavaScript Concepts series” aims to introduce some of these advanced features. This is the first article in the series.</p> <h2 id="why-objects">Why Objects?</h2> <p>The most important concept in JavaScript is that functions are <em>first-class objects</em>. To understand this, we must first grasp JavaScript objects.</p> <p>In JavaScript, newly created objects hold no data and offer minimal semantics. JavaScript objects don’t support “classic” object-oriented programming in the way programmers familiar with languages like Java might expect.</p> <p>We can create objects using the <code class="language-plaintext highlighter-rouge">new</code> operator (other methods exist, as we’ll see later).</p> <p>Objects contain properties and “methods.” Unlike statically-typed languages, properties and methods aren’t predeclared; we create them dynamically. This flexibility comes with a cost!</p> <p>In the following example, we create a new <code class="language-plaintext highlighter-rouge">Object</code> instance and assign it to a variable named <code class="language-plaintext highlighter-rouge">house</code>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">house</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="p">();</span>
<span class="nx">house</span><span class="p">.</span><span class="nx">noOfdoors</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="nx">house</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Main road 51</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">house</span><span class="p">.</span><span class="nx">yearBuild</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="mi">2001</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">);</span>
</code></pre></div></div> <p>Properties aren’t limited to primitive types; an object property can be another object instance. Let’s add an <code class="language-plaintext highlighter-rouge">owner</code> property to our <code class="language-plaintext highlighter-rouge">house</code> instance:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">owner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="p">();</span>
<span class="nx">owner</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Kimi Raikkonen</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">owner</span><span class="p">.</span><span class="nx">occupation</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Rally driver</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">owner</span><span class="p">.</span><span class="nx">previousOccupation</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">F1 driver</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">house</span><span class="p">.</span><span class="nx">owner</span> <span class="o">=</span> <span class="nx">owner</span><span class="p">;</span>
</code></pre></div></div> <p>To access a nested property:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">homeOwnerName</span> <span class="o">=</span> <span class="nx">house</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</code></pre></div></div> <h2 id="json">JSON</h2> <p>A more concise notation for creating objects is JSON (JavaScript Object Notation), preferred by many developers. See <a href="http://www.json.org">http://www.json.org</a> for more information.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">house</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">noOfdoors</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="na">address</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Main road 51</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">yearBuild</span><span class="p">:</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="mi">2001</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span>
  <span class="na">owner</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Kimi Raikkonen</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">occupation</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Rally driver</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//Corrected duplicate 'name' property</span>
  <span class="p">},</span>
<span class="p">};</span>
<span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">House owner: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">house</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Works fine.</span>
</code></pre></div></div> <h2 id="window-object">Window Object</h2> <p>When you declare a variable at the top level (global or window scope) using <code class="language-plaintext highlighter-rouge">var</code>, you’re creating a top-level property of the <code class="language-plaintext highlighter-rouge">window</code> object. Omitting <code class="language-plaintext highlighter-rouge">var</code> inside a function also creates a top-level <code class="language-plaintext highlighter-rouge">window</code> property.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Simon</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// Global variable, property of window object.</span>
<span class="nf">alert</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Works fine.</span>

<span class="kd">function</span> <span class="nf">calculatePi</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// something...</span>
  <span class="nx">result</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span> <span class="c1">// Without var, this is a window property.</span>
<span class="p">}</span>

<span class="nf">calculatePi</span><span class="p">();</span>
<span class="nf">alert</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// Works fine.</span>
</code></pre></div></div> <p>This concludes our introduction to objects. To learn more, read about <a href="http://codingwithpassion.blogspot.com/2010/09/javascript-concepts-part-1-functions.html">JavaScript functions</a>.</p>]]></content><author><name></name></author><category term="javascript-concepts"/><category term="javascript,"/><category term="objects,"/><category term="json,"/><category term="programming"/><summary type="html"><![CDATA[An introduction to objects in JavaScript, including object creation, properties, JSON notation, and the window object.]]></summary></entry></feed>