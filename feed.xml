<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://frazik-main.github.io/website/feed.xml" rel="self" type="application/atom+xml"/><link href="https://frazik-main.github.io/website/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-02T23:12:05+00:00</updated><id>https://frazik-main.github.io/website/feed.xml</id><title type="html">Frazik</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://frazik-main.github.io/website/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We‚Äôre introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we‚Äôre introducing Gemini 1.5 Flash: a model that‚Äôs lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We‚Äôre also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5‚Äôs 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It‚Äôs optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it‚Äôs a lighter weight model than 1.5 Pro, it‚Äôs highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it‚Äôs been trained by 1.5 Pro through a process called ‚Äúdistillation,‚Äù where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash‚Äôs availability and pricing.Over the last few months, we‚Äôve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we‚Äôve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We‚Äôve improved control over the model‚Äôs responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we‚Äôve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we‚Äôre now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do ‚Äî not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we‚Äôre also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We‚Äôre announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we‚Äôve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind‚Äôs mission to build AI responsibly to benefit humanity, we‚Äôve always wanted to develop universal AI agents that can be helpful in everyday life. That‚Äôs why today, we‚Äôre sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do ‚Äî and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we‚Äôve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we‚Äôve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we‚Äôve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they‚Äôre being used in, and respond quickly, in conversation.With technology like this, it‚Äôs easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We‚Äôve made incredible progress so far with our family of Gemini models, and we‚Äôre always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we‚Äôre able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google‚Äôs privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let‚Äôs stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We‚Äôre sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://frazik-main.github.io/website/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://frazik-main.github.io/website/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio¬†Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website!¬†üéâüéâ</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as¬†sources.</p> <p>Any questions or suggestions? üëâ Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on¬†GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry><entry><title type="html">a post with code</title><link href="https://frazik-main.github.io/website/blog/2015/code/" rel="alternate" type="text/html" title="a post with code"/><published>2015-07-15T15:09:00+00:00</published><updated>2015-07-15T15:09:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2015/code</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2015/code/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in markdown code tags:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For displaying code in a list item, you have to be aware of the indentation, as stated in this <a href="https://stackoverflow.com/questions/34987908/embed-a-code-block-in-a-list-item-with-proper-indentation-in-kramdown/38090598#38090598">Stackoverflow answer</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">
   1.</span> Like this:<span class="sb">

      ```c
      printf("Hello, World!");
      ```

</span><span class="p">   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</code></pre></div></div> <p>Which displays:</p> <ol> <li> <p>We can put fenced code blocks inside nested bullets, too.</p> <ol> <li> <p>Like this:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</code></pre></div> </div> </li> <li> <p>The key is to indent your fenced block in the same line as the first character of the line.</p> </li> </ol> </li> </ol> <p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[an example of a blog post with some code]]></summary></entry><entry><title type="html">Storing Collections in Database Columns</title><link href="https://frazik-main.github.io/website/blog/2010/plsql-collections-as-columns/" rel="alternate" type="text/html" title="Storing Collections in Database Columns"/><published>2010-09-06T10:00:00+00:00</published><updated>2010-09-06T10:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/plsql-collections-as-columns</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/plsql-collections-as-columns/"><![CDATA[<p>This post demonstrates how to store collections in database columns within a relational table. This technique is useful for persisting collection data without creating additional detail tables. While common in object databases like Google App Engine Bigtable, this approach is also applicable to relational databases.</p> <h3 id="simple-example">Simple Example</h3> <p>This example uses a <code class="language-plaintext highlighter-rouge">VARRAY</code> (you can also use a nested table ÔøΩ see <a href="http://codingwithpassion.blogspot.com/2010/09/oracle-plsql-collections.html">this article</a> about PL/SQL collections) as a column in a relational table.</p> <p>First, a schema-level collection type <code class="language-plaintext highlighter-rouge">varchar_collection_t</code> is declared, capable of holding up to four <code class="language-plaintext highlighter-rouge">VARCHAR2</code> elements. Then, a table <code class="language-plaintext highlighter-rouge">animes</code> is created with a column <code class="language-plaintext highlighter-rouge">characters</code> of this collection type. Finally, a collection is populated and inserted into the <code class="language-plaintext highlighter-rouge">animes</code> table.</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TYPE</span> <span class="n">varchar_collection_t</span> <span class="k">IS</span> <span class="n">VARRAY</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="k">OF</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="o">/</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">animes</span> <span class="p">(</span>
    <span class="n">name</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">characters</span> <span class="n">varchar_collection_t</span>
<span class="p">);</span>

<span class="k">DECLARE</span>
    <span class="n">anime_characters</span> <span class="n">varchar_collection_t</span> <span class="p">:</span><span class="o">=</span> <span class="n">varchar_collection_t</span><span class="p">();</span>
<span class="k">BEGIN</span>
    <span class="n">anime_characters</span><span class="p">.</span><span class="n">EXTEND</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>

    <span class="n">anime_characters</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Satsuki'</span><span class="p">;</span>
    <span class="n">anime_characters</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Mei'</span><span class="p">;</span>
    <span class="n">anime_characters</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Totoro'</span><span class="p">;</span>
    <span class="n">anime_characters</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Kanta'</span><span class="p">;</span>

    <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">animes</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">characters</span><span class="p">)</span>
    <span class="k">VALUES</span> <span class="p">(</span><span class="s1">'My Neighbor Totoro'</span><span class="p">,</span> <span class="n">anime_characters</span><span class="p">);</span>

<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p>As shown, a simple <code class="language-plaintext highlighter-rouge">INSERT</code> statement is used to insert the collection into the table. <code class="language-plaintext highlighter-rouge">VARRAY</code> columns store collection data inline (similar to comma-separated values), while nested tables create a separate database table behind the scenes. Oracle recommends <code class="language-plaintext highlighter-rouge">VARRAY</code> for smaller arrays and nested tables for larger ones.</p> <p>One important note: you cannot directly manipulate data within a stored collection. You need to use <code class="language-plaintext highlighter-rouge">CAST</code> and <code class="language-plaintext highlighter-rouge">TABLE</code> syntax. This example shows how to filter using data from the collection:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">animes</span> <span class="n">a</span>
<span class="k">WHERE</span> <span class="s1">'Mei'</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="k">TABLE</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">characters</span><span class="p">));</span>
</code></pre></div></div> <p>Notice the use of the <code class="language-plaintext highlighter-rouge">TABLE</code> syntax. Even with only one row in the table, this demonstrates the concept effectively.</p>]]></content><author><name></name></author><category term="database-design"/><category term="oracle,"/><category term="plsql,"/><category term="database,"/><category term="collections,"/><category term="varray,"/><category term="nested"/><category term="table"/><summary type="html"><![CDATA[Demonstrates how to store collections in database columns using Oracle's VARRAY.]]></summary></entry><entry><title type="html">JavaScript Functions - A Deep Dive</title><link href="https://frazik-main.github.io/website/blog/2010/javascript-concepts-part2/" rel="alternate" type="text/html" title="JavaScript Functions - A Deep Dive"/><published>2010-09-05T00:00:00+00:00</published><updated>2010-09-05T00:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/javascript-concepts-part2</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/javascript-concepts-part2/"><![CDATA[<p>This post delves into the often-overlooked deeper aspects of JavaScript functions.</p> <h2 id="introduction">Introduction</h2> <p>JavaScript, a ubiquitous language on the web, is frequently used without a thorough understanding of its underlying mechanisms. This ‚ÄúJavaScript Concepts‚Äù series aims to illuminate some of these deeper concepts. This article provides a concise overview of JavaScript functions.</p> <h2 id="functions-the-core-idea">Functions: The Core Idea</h2> <p>In many traditional object-oriented languages (Java, C++, C#, etc.), objects encapsulate both data and methods. These languages treat data and methods as distinct entities. Methods modify an object‚Äôs state by altering its properties (fields).</p> <p>JavaScript takes a different approach.</p> <p>In JavaScript, <strong>functions are considered objects</strong>. There‚Äôs no distinction between object types like <code class="language-plaintext highlighter-rouge">String</code>, <code class="language-plaintext highlighter-rouge">Number</code>, <code class="language-plaintext highlighter-rouge">window</code> objects, custom objects, and <em>functions</em>. Functions are defined by a constructor named ‚ÄúFunction,‚Äù similar to constructors in other object-oriented languages.</p> <p>A function can have parameters, and its value (being an object) can be assigned to a variable, a property of an object, returned as a function‚Äôs return value, or passed as a parameter to another function. This is all possible because functions in JavaScript are treated like other objects. Therefore, we say that functions are <strong>first-class objects</strong> in JavaScript.</p> <h3 id="example-functions">Example Functions:</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">one</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">doStuff</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">two</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">calculate stuff</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">three</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">stuff</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="function-names">Function Names</h2> <p>Consider this example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">findMatrix</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello Neo, what is the Matrix?</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>This does <em>not</em> create a function named ‚ÄúfindMatrix‚Äù in the way you might expect. While the syntax may seem familiar, it‚Äôs essentially syntactic sugar (a feature JavaScript is known for) similar to using <code class="language-plaintext highlighter-rouge">var</code> to create <code class="language-plaintext highlighter-rouge">window</code> properties (as discussed in a previous article about JavaScript objects). It creates a function instance and assigns it to the <code class="language-plaintext highlighter-rouge">window</code> property using the function‚Äôs name, as shown below:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">findMatrix</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello Neo, what is the Matrix?</span><span class="dl">"</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div> <p>When declaring a top-level named function, a <code class="language-plaintext highlighter-rouge">Function</code> instance is created and assigned to a property (with the function‚Äôs name) of the <code class="language-plaintext highlighter-rouge">window</code> object.</p> <p>While this might seem like a subtle detail, it‚Äôs crucial to understand that <code class="language-plaintext highlighter-rouge">Function</code> instances are <strong>values</strong> that can be assigned to variables, properties, or parameters, just like instances of other object types. Importantly, these function instances are useless unless assigned to a variable, property, or parameter.</p>]]></content><author><name></name></author><category term="javascript-concepts"/><category term="javascript,"/><category term="functions,"/><category term="programming"/><summary type="html"><![CDATA[Exploring the deeper concepts of JavaScript functions, including their object nature and first-class status.]]></summary></entry><entry><title type="html">JavaScript Concepts - Objects</title><link href="https://frazik-main.github.io/website/blog/2010/javascript-concepts-part1/" rel="alternate" type="text/html" title="JavaScript Concepts - Objects"/><published>2010-09-04T10:00:00+00:00</published><updated>2010-09-04T10:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/javascript-concepts-part1</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/javascript-concepts-part1/"><![CDATA[<h1 id="javascript-concepts-objects">JavaScript Concepts: Objects</h1> <h2 id="introduction">Introduction</h2> <p>JavaScript is a widely used web language, but many page authors don‚Äôt utilize its deeper concepts. This ‚ÄúJavaScript Concepts series‚Äù aims to introduce some of these advanced features. This is the first article in the series.</p> <h2 id="why-objects">Why Objects?</h2> <p>The most important concept in JavaScript is that functions are <em>first-class objects</em>. To understand this, we must first grasp JavaScript objects.</p> <p>In JavaScript, newly created objects hold no data and offer minimal semantics. JavaScript objects don‚Äôt support ‚Äúclassic‚Äù object-oriented programming in the way programmers familiar with languages like Java might expect.</p> <p>We can create objects using the <code class="language-plaintext highlighter-rouge">new</code> operator (other methods exist, as we‚Äôll see later).</p> <p>Objects contain properties and ‚Äúmethods.‚Äù Unlike statically-typed languages, properties and methods aren‚Äôt predeclared; we create them dynamically. This flexibility comes with a cost!</p> <p>In the following example, we create a new <code class="language-plaintext highlighter-rouge">Object</code> instance and assign it to a variable named <code class="language-plaintext highlighter-rouge">house</code>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">house</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="p">();</span>
<span class="nx">house</span><span class="p">.</span><span class="nx">noOfdoors</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="nx">house</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Main road 51</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">house</span><span class="p">.</span><span class="nx">yearBuild</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="mi">2001</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">);</span>
</code></pre></div></div> <p>Properties aren‚Äôt limited to primitive types; an object property can be another object instance. Let‚Äôs add an <code class="language-plaintext highlighter-rouge">owner</code> property to our <code class="language-plaintext highlighter-rouge">house</code> instance:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">owner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="p">();</span>
<span class="nx">owner</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Kimi Raikkonen</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">owner</span><span class="p">.</span><span class="nx">occupation</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Rally driver</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">owner</span><span class="p">.</span><span class="nx">previousOccupation</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">F1 driver</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">house</span><span class="p">.</span><span class="nx">owner</span> <span class="o">=</span> <span class="nx">owner</span><span class="p">;</span>
</code></pre></div></div> <p>To access a nested property:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">homeOwnerName</span> <span class="o">=</span> <span class="nx">house</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</code></pre></div></div> <h2 id="json">JSON</h2> <p>A more concise notation for creating objects is JSON (JavaScript Object Notation), preferred by many developers. See <a href="http://www.json.org">http://www.json.org</a> for more information.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">house</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">noOfdoors</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="na">address</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Main road 51</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">yearBuild</span><span class="p">:</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="mi">2001</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span>
  <span class="na">owner</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Kimi Raikkonen</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">occupation</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Rally driver</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//Corrected duplicate 'name' property</span>
  <span class="p">},</span>
<span class="p">};</span>
<span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">House owner: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">house</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Works fine.</span>
</code></pre></div></div> <h2 id="window-object">Window Object</h2> <p>When you declare a variable at the top level (global or window scope) using <code class="language-plaintext highlighter-rouge">var</code>, you‚Äôre creating a top-level property of the <code class="language-plaintext highlighter-rouge">window</code> object. Omitting <code class="language-plaintext highlighter-rouge">var</code> inside a function also creates a top-level <code class="language-plaintext highlighter-rouge">window</code> property.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Simon</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// Global variable, property of window object.</span>
<span class="nf">alert</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Works fine.</span>

<span class="kd">function</span> <span class="nf">calculatePi</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// something...</span>
  <span class="nx">result</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span> <span class="c1">// Without var, this is a window property.</span>
<span class="p">}</span>

<span class="nf">calculatePi</span><span class="p">();</span>
<span class="nf">alert</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// Works fine.</span>
</code></pre></div></div> <p>This concludes our introduction to objects. To learn more, read about <a href="http://codingwithpassion.blogspot.com/2010/09/javascript-concepts-part-1-functions.html">JavaScript functions</a>.</p>]]></content><author><name></name></author><category term="javascript-concepts"/><category term="javascript,"/><category term="objects,"/><category term="json,"/><category term="programming"/><summary type="html"><![CDATA[An introduction to objects in JavaScript, including object creation, properties, JSON notation, and the window object.]]></summary></entry><entry><title type="html">PL/SQL Collections A Comprehensive Guide</title><link href="https://frazik-main.github.io/website/blog/2010/plsq-collections/" rel="alternate" type="text/html" title="PL/SQL Collections A Comprehensive Guide"/><published>2010-09-03T10:00:00+00:00</published><updated>2010-09-03T10:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/plsq-collections</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/plsq-collections/"><![CDATA[<p>It‚Äôs surprising how few database programmers truly understand and utilize collections in PL/SQL. They often favor a more SQL-like approach, overlooking potential performance gains and improvements in code readability.</p> <p>With collections, you can significantly enhance performance by caching frequently accessed data within a single program. Data processing can also be sped up, eliminating the need for relational tables or global temporary tables.</p> <p>While PL/SQL collections might seem cumbersome and confusing (especially compared to collections in languages like Java), they offer powerful capabilities. There are three main types:</p> <p><strong>Associative Arrays</strong></p> <p>These are single-dimensional, unbounded, and sparse collections of homogeneous elements. They don‚Äôt need to be filled sequentially. The following example demonstrates declaration, population, and iteration:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SET</span> <span class="n">SERVEROUTPUT</span> <span class="k">ON</span>

<span class="k">DECLARE</span>
    <span class="k">TYPE</span> <span class="n">names_list_t</span> <span class="k">IS</span> <span class="k">TABLE</span> <span class="k">OF</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span>
        <span class="k">INDEX</span> <span class="k">BY</span> <span class="n">PLS_INTEGER</span><span class="p">;</span>
    <span class="n">people</span> <span class="n">names_list_t</span><span class="p">;</span>

    <span class="n">l_row</span> <span class="n">PLS_INTEGER</span><span class="p">;</span> <span class="c1">-- Same type as index.</span>

<span class="k">BEGIN</span>

    <span class="n">people</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>         <span class="p">:</span><span class="o">=</span> <span class="s1">'Bob'</span><span class="p">;</span>
    <span class="n">people</span><span class="p">(</span><span class="mi">33</span><span class="p">)</span>        <span class="p">:</span><span class="o">=</span> <span class="s1">'Bruce'</span><span class="p">;</span>
    <span class="n">people</span><span class="p">(</span><span class="mi">43</span><span class="p">)</span>        <span class="p">:</span><span class="o">=</span> <span class="s1">'Rocky'</span><span class="p">;</span>
    <span class="n">people</span><span class="p">(</span><span class="o">-</span><span class="mi">12</span><span class="p">)</span>        <span class="p">:</span><span class="o">=</span> <span class="s1">'Grozni'</span><span class="p">;</span>
    <span class="n">people</span><span class="p">(</span><span class="mi">1555555</span><span class="p">)</span>   <span class="p">:</span><span class="o">=</span> <span class="s1">'Ivan'</span><span class="p">;</span>

    <span class="n">l_row</span> <span class="p">:</span><span class="o">=</span> <span class="n">people</span><span class="p">.</span><span class="k">FIRST</span><span class="p">;</span>

    <span class="n">WHILE</span> <span class="p">(</span><span class="n">l_row</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">)</span>
    <span class="n">LOOP</span>
        <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="n">people</span><span class="p">(</span><span class="n">l_row</span><span class="p">));</span>
        <span class="n">l_row</span> <span class="p">:</span><span class="o">=</span> <span class="n">people</span><span class="p">.</span><span class="k">NEXT</span><span class="p">(</span><span class="n">l_row</span><span class="p">);</span>
    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p>Associative arrays are the most efficient type. However, they cannot be stored directly in database tables (use nested tables or VARRAYs for that). They are the only practical choice for sparse collections or when negative index subscripts are required.</p> <p><strong>Nested Tables</strong></p> <p>These are also single-dimensional and unbounded collections of homogeneous elements. They start dense but can become sparse through deletions. Nested tables are <em>multisets</em>, meaning element order isn‚Äôt inherent. This can be problematic if order needs to be preserved (use VARRAYs for that). While you can use keys and indexes, VARRAYs provide a more straightforward solution for maintaining order.</p> <p>The following example shows how to declare a nested table type at the schema level, declare nested tables based on that type, create their union, and display the result:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">TYPE</span> <span class="n">car_names_list_t</span> <span class="k">IS</span> <span class="k">TABLE</span> <span class="k">OF</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>

<span class="k">DECLARE</span>
    <span class="n">great_cars</span>          <span class="n">car_names_list_t</span> <span class="p">:</span><span class="o">=</span> <span class="n">car_names_list_t</span><span class="p">();</span>
    <span class="n">not_so_great_cars</span>   <span class="n">car_names_list_t</span> <span class="p">:</span><span class="o">=</span> <span class="n">car_names_list_t</span><span class="p">();</span>

    <span class="n">all_this_cars</span>       <span class="n">car_names_list_t</span> <span class="p">:</span><span class="o">=</span> <span class="n">car_names_list_t</span><span class="p">();</span>

<span class="k">BEGIN</span>
    <span class="n">great_cars</span><span class="p">.</span><span class="n">EXTEND</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
    <span class="n">great_cars</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Golf'</span><span class="p">;</span>
    <span class="n">great_cars</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Impreza'</span><span class="p">;</span>
    <span class="n">great_cars</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Focus'</span><span class="p">;</span>

    <span class="n">not_so_great_cars</span><span class="p">.</span><span class="n">EXTEND</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="n">not_so_great_cars</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Zastava'</span><span class="p">;</span>
    <span class="n">not_so_great_cars</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Dacia'</span><span class="p">;</span>

    <span class="n">all_this_cars</span> <span class="p">:</span><span class="o">=</span> <span class="n">great_cars</span> <span class="n">MULTISET</span> <span class="k">UNION</span> <span class="n">not_so_great_cars</span><span class="p">;</span>

    <span class="k">FOR</span> <span class="n">l_row</span> <span class="k">IN</span> <span class="n">all_this_cars</span><span class="p">.</span><span class="k">FIRST</span> <span class="p">..</span> <span class="n">all_this_cars</span><span class="p">.</span><span class="k">LAST</span>
    <span class="n">LOOP</span>
        <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="n">all_this_cars</span><span class="p">(</span><span class="n">l_row</span><span class="p">));</span>
    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>

<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">EXTEND</code> is used to increase the size of nested tables. <code class="language-plaintext highlighter-rouge">MULTISET UNION</code> (and others like <code class="language-plaintext highlighter-rouge">MULTISET EXCEPT</code>) are used for high-level set operations. In such cases, <code class="language-plaintext highlighter-rouge">EXTEND</code> is often unnecessary.</p> <p>Nested tables are beneficial for high-level set operations, especially in older Oracle databases (&lt;= 10g). They are also the only option for storing large amounts of persistent data in a collection column because the database creates an underlying table.</p> <p><strong>VARRAYs (Variable-Size Arrays)</strong></p> <p>Similar to the other two, VARRAYs are single-dimensional collections of homogeneous elements. However, they are always bounded (have a maximum size) and never sparse. When declaring a VARRAY type, you must specify the maximum number of elements. A key difference from nested tables is that VARRAYs preserve element order when stored as database columns.</p> <p>This example demonstrates basic VARRAY usage:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SET</span> <span class="n">SERVEROUTPUT</span> <span class="k">ON</span>

<span class="k">DECLARE</span>
    <span class="k">TYPE</span> <span class="n">anime_movies_t</span> <span class="k">IS</span> <span class="n">VARRAY</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="k">OF</span> <span class="n">VARCHAR2</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>

    <span class="n">anime_movies</span> <span class="n">anime_movies_t</span> <span class="p">:</span><span class="o">=</span> <span class="n">anime_movies_t</span><span class="p">();</span>

<span class="k">BEGIN</span>
    <span class="c1">-- Extend to accommodate the first element</span>
    <span class="n">anime_movies</span><span class="p">.</span><span class="n">EXTEND</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">anime_movies</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Akira'</span><span class="p">;</span>
    <span class="c1">-- Extend to the full length</span>
    <span class="n">anime_movies</span><span class="p">.</span><span class="n">EXTEND</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="n">anime_movies</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'Castle in the sky'</span><span class="p">;</span>
    <span class="n">anime_movies</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="s1">'My neighbour Totoro'</span><span class="p">;</span>

    <span class="c1">-- Loop or perform other operations here</span>
<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p>Remember to use <code class="language-plaintext highlighter-rouge">EXTEND</code> to make room for elements.</p> <p>Use VARRAYs when you need to preserve element order in a database column, have a relatively small amount of data, don‚Äôt need to worry about deletions in the middle, have an intrinsic upper bound, or need to retrieve the entire collection at once.</p> <p>As a final tip, when working with PL/SQL collections, consider creating a package of procedures and functions to encapsulate collection management. This might even hide the underlying collection type, but that‚Äôs not always necessary or beneficial.</p>]]></content><author><name></name></author><category term="Database,"/><category term="Programming"/><category term="PL/SQL,"/><category term="collections,"/><category term="associative"/><category term="arrays,"/><category term="nested"/><category term="tables,"/><category term="VARRAY,"/><category term="Oracle"/><summary type="html"><![CDATA[A detailed explanation of associative arrays, nested tables, and VARRAYs in PL/SQL, including examples and best practices.]]></summary></entry><entry><title type="html">Caching Static Data in PL/SQL for Performance Improvement</title><link href="https://frazik-main.github.io/website/blog/2010/caching-data-plsql/" rel="alternate" type="text/html" title="Caching Static Data in PL/SQL for Performance Improvement"/><published>2010-09-03T10:00:00+00:00</published><updated>2010-09-03T10:00:00+00:00</updated><id>https://frazik-main.github.io/website/blog/2010/caching-data-plsql</id><content type="html" xml:base="https://frazik-main.github.io/website/blog/2010/caching-data-plsql/"><![CDATA[<p>In many applications, PL/SQL programs repeatedly access the same data from a database. If this data is static (rarely or never changes), repeatedly querying it is inefficient. A better approach is to cache this data in a collection stored within the session‚Äôs PGA. This method uses the collection‚Äôs index as an ‚Äúintelligent key,‚Äù retrieving data quickly without repeated database queries.</p> <p>Consider the following example:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="n">PACKAGE</span> <span class="n">onlyonce</span> <span class="k">AS</span>

    <span class="k">TYPE</span> <span class="n">names_t</span> <span class="k">IS</span>
        <span class="k">TABLE</span> <span class="k">OF</span> <span class="n">employees</span><span class="p">.</span><span class="n">first_name</span><span class="o">%</span><span class="k">TYPE</span>
            <span class="k">INDEX</span> <span class="k">BY</span> <span class="n">PLS_INTEGER</span><span class="p">;</span>

    <span class="k">names</span> <span class="n">names_t</span><span class="p">;</span>

    <span class="k">FUNCTION</span> <span class="n">get_name</span><span class="p">(</span><span class="n">employee_id_in</span> <span class="k">IN</span> <span class="n">employees</span><span class="p">.</span><span class="n">employee_id</span><span class="o">%</span><span class="k">TYPE</span><span class="p">)</span>
        <span class="k">RETURN</span> <span class="n">employees</span><span class="p">.</span><span class="n">first_name</span><span class="o">%</span><span class="k">TYPE</span><span class="p">;</span>

<span class="k">END</span> <span class="n">onlyonce</span><span class="p">;</span>
<span class="o">/</span>

<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="n">PACKAGE</span> <span class="n">BODY</span> <span class="n">onlyonce</span> <span class="k">AS</span>

    <span class="k">FUNCTION</span> <span class="n">name_from_database</span><span class="p">(</span><span class="n">employee_id_in</span> <span class="k">IN</span> <span class="n">employees</span><span class="p">.</span><span class="n">employee_id</span><span class="o">%</span><span class="k">TYPE</span><span class="p">)</span>
        <span class="k">RETURN</span> <span class="n">employees</span><span class="p">.</span><span class="n">first_name</span><span class="o">%</span><span class="k">TYPE</span>
    <span class="k">IS</span>
        <span class="n">local_names</span> <span class="n">employees</span><span class="p">.</span><span class="n">first_name</span><span class="o">%</span><span class="k">TYPE</span><span class="p">;</span>
    <span class="k">BEGIN</span>
        <span class="k">SELECT</span> <span class="n">first_name</span>
            <span class="k">INTO</span> <span class="n">local_names</span>
            <span class="k">FROM</span> <span class="n">employees</span>
           <span class="k">WHERE</span> <span class="n">employee_id</span> <span class="o">=</span> <span class="n">employee_id_in</span><span class="p">;</span>
        <span class="k">RETURN</span> <span class="n">local_names</span><span class="p">;</span>
    <span class="n">EXCEPTION</span>
        <span class="k">WHEN</span> <span class="n">NO_DATA_FOUND</span> <span class="k">THEN</span>
            <span class="k">RETURN</span> <span class="k">NULL</span><span class="p">;</span> <span class="c1">-- Handle case where employee ID is not found</span>
    <span class="k">END</span><span class="p">;</span>

    <span class="k">FUNCTION</span> <span class="n">get_name</span><span class="p">(</span><span class="n">employee_id_in</span> <span class="k">IN</span> <span class="n">employees</span><span class="p">.</span><span class="n">employee_id</span><span class="o">%</span><span class="k">TYPE</span><span class="p">)</span>
        <span class="k">RETURN</span> <span class="n">employees</span><span class="p">.</span><span class="n">first_name</span><span class="o">%</span><span class="k">TYPE</span>
    <span class="k">IS</span>
        <span class="n">return_value</span> <span class="n">employees</span><span class="p">.</span><span class="n">first_name</span><span class="o">%</span><span class="k">TYPE</span><span class="p">;</span>
    <span class="k">BEGIN</span>
        <span class="k">RETURN</span> <span class="k">names</span><span class="p">(</span><span class="n">employee_id_in</span><span class="p">);</span>
    <span class="n">EXCEPTION</span>
        <span class="k">WHEN</span> <span class="n">NO_DATA_FOUND</span> <span class="k">THEN</span>
            <span class="k">names</span><span class="p">(</span><span class="n">employee_id_in</span><span class="p">)</span> <span class="p">:</span><span class="o">=</span> <span class="n">name_from_database</span><span class="p">(</span><span class="n">employee_id_in</span><span class="p">);</span>
            <span class="k">RETURN</span> <span class="k">names</span><span class="p">(</span><span class="n">employee_id_in</span><span class="p">);</span>
    <span class="k">END</span><span class="p">;</span>

<span class="k">END</span> <span class="n">onlyonce</span><span class="p">;</span>
<span class="o">/</span>

<span class="k">SET</span> <span class="n">SERVEROUTPUT</span> <span class="k">ON</span>

<span class="k">BEGIN</span>
    <span class="k">FOR</span> <span class="n">j</span> <span class="k">IN</span> <span class="mi">1</span><span class="p">..</span><span class="mi">10</span> <span class="n">LOOP</span>
        <span class="k">FOR</span> <span class="n">i</span> <span class="k">IN</span> <span class="mi">100</span><span class="p">..</span><span class="mi">150</span> <span class="n">LOOP</span>
            <span class="n">DBMS_OUTPUT</span><span class="p">.</span><span class="n">put_line</span><span class="p">(</span><span class="n">onlyonce</span><span class="p">.</span><span class="n">get_name</span><span class="p">(</span><span class="n">i</span><span class="p">));</span>
        <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>
<span class="o">/</span>
</code></pre></div></div> <p>Let‚Äôs break down the code:</p> <p><strong>Lines 3-7:</strong> Declare a collection type (<code class="language-plaintext highlighter-rouge">names_t</code>) and a collection (<code class="language-plaintext highlighter-rouge">names</code>) to hold cached data.</p> <p><strong>Lines 16-26:</strong> <code class="language-plaintext highlighter-rouge">name_from_database</code> function retrieves data from the database one by one. Improved to handle <code class="language-plaintext highlighter-rouge">NO_DATA_FOUND</code> exception gracefully by returning <code class="language-plaintext highlighter-rouge">NULL</code>.</p> <p><strong>Line 28:</strong> Declaration of the main retrieval function (<code class="language-plaintext highlighter-rouge">get_name</code>). This function returns data either from the database or the collection, depending on whether the key exists in the collection. The only parameter is the employee ID.</p> <p><strong>Lines 32-40:</strong> The core caching logic. If an element with the given ID isn‚Äôt in the collection, it‚Äôs fetched from the database and added to the collection. The exception handling is improved to return <code class="language-plaintext highlighter-rouge">NULL</code> if the employee ID is not found in the database.</p> <p><strong>Lines 46-52:</strong> The code iterates through a range of employee IDs. The first iteration fetches data from the database; subsequent iterations retrieve data from the collection.</p> <p><strong>Performance Comparison:</strong> In testing, executing 10,000 queries against a table took approximately 2 seconds, while retrieving the same data from the collection took only 0.1 secondsÔøΩa significant performance improvement (an order of magnitude faster). Caching static data also improves code quality by implicitly documenting static structures within the program.</p>]]></content><author><name></name></author><category term="database,"/><category term="performance-tuning"/><category term="plsql,"/><category term="oracle,"/><category term="performance,"/><category term="caching,"/><category term="collections"/><summary type="html"><![CDATA[Optimize PL/SQL performance by caching static data in a collection stored in the session's PGA.]]></summary></entry></feed>